1670694538
waR3U4bTeM%3A1aaf754d8282cacbe52a60e0ed5dcfa6-c4930ce9313b03f12f78a6e2e6017b6a
s:68996:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MzY6IkFsdW1ubzogVmljdG9yIE1hbnVlbCBNYWNoYWRvIEVnaWRvLiI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czoyMjM6IkNlbnRybyBFZHVjYXRpdm86IEVzY3VlbGEgVmlyZ2VuIGRlIEd1YWRhbHVwZS4KCkNpY2xvIEZvcm1hdGl2bzogRGVzYXJyb2xsbyBkZSBBcGxpY2FjaW9uZXMgV2ViLgoKQ3Vyc286IDIwMjAtMjAyMS4KCkRlc2NyaXBjaW9uIGRlbCBmaWNoZXJvOiBFbiBlc3RlIGZpY2hlcm8gZXN0YSBkZWZpbmFkYSBsYXMgdmFyaWFibGVzIHBhcmEgYWNjZWRlciBhbCBob3N0ICYgQmFzZSBkZSBEYXRvcy4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czowOiIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjA6e319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImM0OTMwY2U5MzEzYjAzZjEyZjc4YTZlMmU2MDE3YjZhIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTA6ImdydXBvcy5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czoyMToicmVnaXN0cmFkby9ncnVwb3MucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czo0OTg4MjoiPD9waHAKCS8qKgoJKiBBbHVtbm86IFZpY3RvciBNYW51ZWwgTWFjaGFkbyBFZ2lkby4KCSoKCSogQ2VudHJvIEVkdWNhdGl2bzogRXNjdWVsYSBWaXJnZW4gZGUgR3VhZGFsdXBlLgoJKgoJKiBDaWNsbyBGb3JtYXRpdm86IERlc2Fycm9sbG8gZGUgQXBsaWNhY2lvbmVzIFdlYi4KCSoKCSogQ3Vyc286IDIwMjAtMjAyMS4KCSoKCSogRGVzY3JpcGNpb24gZGVsIGZpY2hlcm86IEVuIGVzdGUgZmljaGVybyBlc3RhIGRlZmluYWRhIGxhcyB2YXJpYWJsZXMgcGFyYSBhY2NlZGVyIGFsIGhvc3QgJiBCYXNlIGRlIERhdG9zLgoJKi8KCiAgICAvLyBJbmljaWFyIHNlc3Npb24KICAgIHNlc3Npb25fc3RhcnQoKTsKCiAgICAvLyBUcmFlcm1lIGxvcyBkYXRvcyBkZSBvcGVyYWNpb25lcy4KICAgIHJlcXVpcmUoIi4uL2Fzc2V0cy9vcGVyYWNpb25lcy9vcGVyYWNpb25lcy5waHAiKTsKICAgIC8vIENyZWFyIGVsIG9iamV0byBkZSBPcGVyYWNpb25lcy4KICAgICRvYmpldG8gPSBuZXcgT3BlcmFjaW9uZXMoKTsKCgkvLyBUcmFlcm1lIGxvcyBkYXRvcyBkZSBvcGVyYWNpb25lc19mdHAuCiAgICByZXF1aXJlKCIuLi9hc3NldHMvb3BlcmFjaW9uZXMvb3BlcmFjaW9uZXNfZnRwLnBocCIpOwoJLy8gQ3JlYXIgZWwgb2JqZXRvIGRlIE9wZXJhY2lvbmVzX2Z0cC4KICAgICRvYmpldG9wcm9jZXNvc2FwcCA9IG5ldyBPcGVyYWNpb25lc19mdHAoKTsKCgo/Pgo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZXMiPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICAgICAgPG1ldGEgbmFtZT0iYXV0aG9yIiBjb250ZW50PSJWaWN0b3IgTWFudWVsIE1hY2hhZG8gRWdpZG8iPgogICAgICAgIDx0aXRsZT5BbWlnbyBJbnZpc2libGUgLSBJbmljaW88L3RpdGxlPgoKICAgICAgICA8IS0tIExvZ28gZGUgbGEgZW1wcmVzYSBlbiBsYSBwZXN0YcOxYSAtLT4KICAgICAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii4uL2Fzc2V0cy9pbWFnZW5lcy9sb2dvLnBuZyIgLz4KCiAgICAgICAgPCEtLSBCb29zdHJhcCAtLT4KICAgICAgICA8bGluayBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA1LjEuMi9kaXN0L2Nzcy9ib290c3RyYXAubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiBpbnRlZ3JpdHk9InNoYTM4NC11V3hZL0NKTkJSKzF6alBXbWZuU25WeHdSaGVldlhJVG5NcW9FSWVHMUxKcmRJMEdsVnMvOWNWU3lQWVhkY1NGIiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj4KCiAgICAgICAgPCEtLSBGb250YXdlc29tZSAtLT4KICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS80LjYuMC9jc3MvZm9udC1hd2Vzb21lLmNzcyIgaW50ZWdyaXR5PSJzaGE1MTItQ0IrWFl4UkM3Y1hacU8vOGNQM1YrdmUyKzZnNnluT252SkQ2cDRFNHkzK3d3a1NjSDlxRU9sYStCVEh6Y3dCNHhLZ3ZXbjgxNkl2MGlvNWwzckFPQkE9PSIgY3Jvc3NvcmlnaW49ImFub255bW91cyIgcmVmZXJyZXJwb2xpY3k9Im5vLXJlZmVycmVyIiAvPgoKICAgICAgICA8IS0tIEVzdGlsb3MgR2VuZXJhbGVzIC0tPgogICAgICAgIDxsaW5rIGhyZWY9Ii4uL2Fzc2V0cy9jc3MvZXN0aWxvLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ij4KCgkJPCEtLSBMaWJyZXJpYSBkZSBBbGVydGFzICAtLT4KICAgICAgICA8IS0tIFBhZ2luYSBodHRwczovL3N3ZWV0YWxlcnQyLmdpdGh1Yi5pbyAtLT4KICAgICAgICA8c2NyaXB0IHNyYz0iLy9jZG4uanNkZWxpdnIubmV0L25wbS9zd2VldGFsZXJ0MkAxMSI+PC9zY3JpcHQ+CgogICAgICAgIDwhLS0gTGlicmVyaWFzIHBhcmEganF1ZXJlLCBnb29nbGUsIGJvb3N0cmFwLCBldGMuIC0tPgogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMy40LjEuc2xpbS5taW4uanMiPjwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8zLjQuMS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9wb3BwZXIuanNAMS4xNi4wL2Rpc3QvdW1kL3BvcHBlci5taW4uanMiPjwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL3N0YWNrcGF0aC5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjQuMS9qcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9heGlvcy9kaXN0L2F4aW9zLm1pbi5qcyI+PC9zY3JpcHQ+CgogICAgICAgIDwhLS0gTGlicmVyaWFzIHBlcnNvbmFsZXMgLS0+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLi4vYXNzZXRzL2pzL2NyZWFyZ3J1cG8uanMiPjwvc2NyaXB0PgogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii4uL2Fzc2V0cy9qcy9mdW5jaW9uZXMuanMiPjwvc2NyaXB0PgoKCiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KICAgICAgICA8IS0tIENvbXByb2JhciBxdWUgbGEgc2VzaW9uIGNvcnJlbyBleGlzdGUgLS0+CiAgICAgICAgPD9waHAKCiAgICAgICAgICAgIC8vIFNpIG5vIGhheSBzZXNpb24gY29ycmVvLCBtZW5zYWplIGRlIGFsZXJ0YS4KICAgICAgICAgICAgaWYoIWlzc2V0KCRfU0VTU0lPTlsiY29ycmVvIl0pKXsKICAgICAgICAgICAgICAgIC8vIE1lbnNhamUgZGUgYWxlcnRhIHF1ZSBubyBoYSBpbmljaWFkbyBzZXNpb24KICAgICAgICAgICAgICAgIGVjaG8gJzxzY3JpcHQ+IG5vbG9nZWFkbygpOyA8L3NjcmlwdD4nOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBDcmVvIGxhIHZhcmlhYmxlIGRlIGxhIGZlY2hhCiAgICAgICAgICAgICRmZWNoYWhveSA9IGRhdGUoJ1ktbS1kJyk7CiAgICAgICAgPz4KCQkKICAgICAgICA8IS0tIFJldmlzYSBzaSBlc3RhIGludml0YWRvIGFsZ3VuIGdydXBvIHkgbG8gcmVnaXN0cmEgLS0+CiAgICAgICAgPD9waHAKICAgICAgICAgICAgLy8gR3VhcmRvIGxhIHZhcmlhYmxlIGRlIGxhIHNlc2lvbiBkZWwgY29ycmVvLgogICAgICAgICAgICAkY29ycmVvID0gJF9TRVNTSU9OWyJjb3JyZW8iXTsKCiAgICAgICAgICAgIC8vIENvbnN1bHRhLiBCdXNjYXIgc2kgZXNlIGNvcnJlbyBlc3RhIGludml0YWRvIGFsZ3VuIGdydXBvLgogICAgICAgICAgICAkY29uc3VsdGEgPSAiCiAgICAgICAgICAgICAgICBTRUxFQ1QgKgogICAgICAgICAgICAgICAgRlJPTSBpbnZpdGFkbwogICAgICAgICAgICAgICAgV0hFUkUgQ29ycmVvID0gJyIuJGNvcnJlby4iJzsKICAgICAgICAgICAgIjsKICAgICAgICAgICAgLy9wcmludF9yKCRjb25zdWx0YSk7CiAgICAgICAgICAgICRvYmpldG8tPnJlYWxpemFyQ29uc3VsdGFzKCRjb25zdWx0YSk7CgogICAgICAgICAgICAvLyBTaSBkZXZ1ZWx2ZSBmaWxhcywgc2lnbmlmaWNhIHF1ZSBlc2UgY29ycmVvIGVzdGEgaW52aXRhZG8gYWxndW4gZ3J1cG8geSBlbnRyYSBlbiBlbCBpZi4KICAgICAgICAgICAgaWYoJG9iamV0by0+Y29tcHJvYmFyRmlsYSgpPjApewogICAgICAgICAgICAgICAgLy8gU2UgZXh0cmFlIGVsIHJlc3VsdGFkbyBkZSBsYSBjb25zdWx0YSB5IHNlIGd1YXJkYSBlbiBidWNsZSBlbiAkZmlsYSwgeSBhIGNvbnRpbnVhY2lvbiBzZSB2YSBndWFyZGFuZG8gbGEgSURHcnVwbyBlbiB1bmEgYXJyYXkKICAgICAgICAgICAgICAgIHdoaWxlKCRmaWxhID0gJG9iamV0by0+ZXh0cmFlckZpbGFzKCkpewogICAgICAgICAgICAgICAgICAgIC8vIEd1YXJkbyBlbCBkYXRvIHJlY2liaWRvIGRlIGxhIGZpbGEgSURHcnVwbyBlbiB1bmEgdmFyaWFibGUuCiAgICAgICAgICAgICAgICAgICAgJGFycmF5aW52aXRhZG9bXSA9ICRmaWxhWyJJREdydXBvIl07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBTZSByZWNvcnJlIGxhIGFycmF5IGNvbiBsb3MgdmFsb3JlcyBkZSBsYSBJREdydXBvcywgcXVlIGVzIGludml0YWRvIGVsIHVzdWFyaW8uCiAgICAgICAgICAgICAgICBmb3JlYWNoKCRhcnJheWludml0YWRvIGFzICR2YWxvcil7CiAgICAgICAgICAgICAgICAgICAgLy8gZWNobyAkdmFsb3IuJy0nOwogICAgICAgICAgICAgICAgICAgIC8vIENvbnN1bHRhLiBDb21wcnVlYmEgc2kgZWwgY29ycmVvIHkgZWwgZ3J1cG8gZGUgbGEgaW52aXRhY2lvbiwgZnVlIHJlZ2lzdHJhZG8gbyBuby4KICAgICAgICAgICAgICAgICAgICAkY29uc3VsdGEgPSIKICAgICAgICAgICAgICAgICAgICAgICAgU0VMRUNUIHVzdWFyaW9zLklEVXN1YXJpbywgdXN1YXJpb3MuQ29ycmVvLCBncnVwb3MuSURHcnVwbywgZ3J1cG9zLlByb3BpZXRhcmlvCiAgICAgICAgICAgICAgICAgICAgICAgIEZST00gdXN1YXJpb3MKICAgICAgICAgICAgICAgICAgICAgICAgSU5ORVIgSk9JTiB1c3VhcmlvZ3J1cG8gT04gdXN1YXJpb2dydXBvLklEVXN1YXJpbyA9IHVzdWFyaW9zLklEVXN1YXJpbwogICAgICAgICAgICAgICAgICAgICAgICBJTk5FUiBKT0lOIGdydXBvcyBPTiBncnVwb3MuSURHcnVwbyA9IHVzdWFyaW9ncnVwby5JREdydXBvCiAgICAgICAgICAgICAgICAgICAgICAgIFdIRVJFIHVzdWFyaW9zLkNvcnJlbyA9ICciLiRjb3JyZW8uIicgQU5EIGdydXBvcy5JREdydXBvID0gJyIuJHZhbG9yLiInOwogICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgLy9wcmludCgkY29uc3VsdGEpOwogICAgICAgICAgICAgICAgICAgIC8vZWNobyAnPGJyPjxicj4nOwogICAgICAgICAgICAgICAgICAgICRvYmpldG8tPnJlYWxpemFyQ29uc3VsdGFzKCRjb25zdWx0YSk7CgogICAgICAgICAgICAgICAgICAgIC8vIFNpIGRldnVlbHZlIGZpbGFzLCBzaWduaWZpY2EgcXVlIGVzZSBjb3JyZW8geWEgZXN0YSByZWdpc3RyYWRvIGVuIGVzZSBncnVwby4KICAgICAgICAgICAgICAgICAgICBpZigkb2JqZXRvLT5jb21wcm9iYXJGaWxhKCk+MCkKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHNjcmlwdD4gY29uc29sZS5sb2coIkVzdGEgZW4gdW4gZ3J1cG8uIik7IDwvc2NyaXB0Pic7CiAgICAgICAgICAgICAgICAgICAgZWxzZSAvKiBTaSBlbnRyYSBhcXVpIHNpZ25pZmljYSwgcXVlIG5vIGVzdGEgcmVnaXN0cmFkbyBlbiBlbCBncnVwby4qL3sKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHNjcmlwdD4gY29uc29sZS5sb2coIlJlZ2lzdHJhbmRvdGUgZW4gZWwgZ3J1cG8uLi4iKTsgPC9zY3JpcHQ+JzsKCgkJCQkJCS8vIENvbnN1bHRhLiBCdXNjYSBhIGVzZSB1c3VhcmlvIHNpIGVzdGEgcmVnaXN0cmFkby4KICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnN1bHRhID0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRUxFQ1QgSURVc3VhcmlvLCBDb3JyZW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZST00gdXN1YXJpb3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdIRVJFIHVzdWFyaW9zLkNvcnJlbyA9ICciLiRjb3JyZW8uIic7CiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJpbnQoJGNvbnN1bHRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgJG9iamV0by0+cmVhbGl6YXJDb25zdWx0YXMoJGNvbnN1bHRhKTsKCQkJCQkJCgkJCQkJCS8vIFNpIGRldnVlbHZlIGZpbGFzLCBzaWduaWZpY2EgcXVlIGVzdGEgcmVnaXN0cmFkbyBlbiBsYSB3ZWIuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRvYmpldG8tPmNvbXByb2JhckZpbGEoKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhciBsYXMgZmlsYXMgZGUgbGEgY29uc3VsdGEuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmlsYSA9ICRvYmpldG8tPmV4dHJhZXJGaWxhcygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lY2hvICc8YnI+SURVc3VhcmlvOiAnLiRmaWxhWyJJRFVzdWFyaW8iXS4nLScuJHZhbG9yLic8YnI+PGJyPic7CgkJCQkJCQkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlIGd1YXJkYSBsYSBJRFVzdWFyaW8gZW4gdW5hIHZhcmlhYmxlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlkdXN1YXJpbyA9ICRmaWxhWyJJRFVzdWFyaW8iXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25zdWx0YS4gU2UgaW50cm9kdWNlIGxhIElEVXN1cmlvIHkgbGEgSURHcnVwbyBkZWwgaW52aXRhZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb25zdWx0YSA9ICJJTlNFUlQgSU5UTyB1c3VhcmlvZ3J1cG8gKElEVXN1YXJpbywgSURHcnVwbykgVkFMVUVTICgnIi4kaWR1c3VhcmlvLiInLCAnIi4kdmFsb3IuIicpIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvYmpldG8tPnJlYWxpemFyQ29uc3VsdGFzKCRjb25zdWx0YSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZGV2dWVsdmUgZmlsYXMgc2lnbmlmaWNhIHF1ZSBzZSBpbnNlcnRvIGNvcnJlY3RhbWVudGUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkb2JqZXRvLT5jb21wcm9iYXIoKT4wKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCWVjaG8gJzxzY3JpcHQ+IGNvbnNvbGUubG9nKCJTZSBhZ3JlZ28gZWwgdXN1YXJpbyBhbCBncnVwbyIpOyA8L3NjcmlwdD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSAvKiBObyBzZSBpbnNlcnRvIGxvcyBkYXRvcy4gKi97CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHNjcmlwdD4gY29uc29sZS5sb2coIkh1Ym8gdW4gcHJvYmxlbWEgYWwgYWdyZWdhciBlbCB1c3VhcmlvIGFsIGdydXBvIik7IDwvc2NyaXB0Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICA/PgoKICAgICAgICA8IS0tIFNlIGNvbXBydWViYSBzaSBoYXkgdW5hIGlkIGVuIGxhIHVybCAtLT4KICAgICAgICA8P3BocAoKICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHNpIGV4aXN0ZSBsYSB2YXJpYWJsZSAkX0dFVFsiaWQiXS4KICAgICAgICAgICAgLy8gRW4gY2FzbyBxdWUgZXhpc3RhIGVudHJhIGVuIGVsIGlmIHBvciBsbyBjb250cmFyaW8gbm8gaGFjZSBuYWRhLgogICAgICAgICAgICBpZihpc3NldCgkX0dFVFsiaWQiXSkpewogICAgICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHNpIGxhIHZhcmlhYmxlICRfR0VUWyJvcGNpb24iXSBlcyBpZ3VhbCBhICdlZCcgKGVkaXRhciksIGVuIGNhc28gcXVlIG5vIHNlYSBhc2kgc2UgdmEgYWwgZWxzZS4KICAgICAgICAgICAgICAgIC8vIEVqZWN1dGEgbGEgdmVudGFuYSBtb2RhbCBkZSBlZGl0YXIgZ3J1cG8uIExvIGhhY2UgdmlzaWJsZS4KICAgICAgICAgICAgICAgIGlmKCRfR0VUWyJvcGNpb24iXT09J2VkJyl7CgkJCQkJLy8gU2kgdGllbmUgZWwgcm9sIHAgKFByb2Zlc29yKSBwb2RyYSBlbnRyYXIgYWwgaWYuCgkJCQkJaWYoJF9TRVNTSU9OWyJyb2wiXSA9PSAicCIpewoJCQkJCQkvLyBFamVjdXRhIHVuIHNjcmlwdCwgcGFyYSBhYnJpciBsYSB2ZW50YW5hIG1vZGFsLgoJCQkJCQllY2hvICc8c2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3ZlbnRhbmFlZGl0YXJncnVwbyIpLm1vZGFsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+JzsKCQkJCQl9ZWxzZQoJCQkJCQllY2hvICc8c2NyaXB0PiBlcnJvcigpOyA8L3NjcmlwdD4nOwogICAgICAgICAgICAgICAgfQoJCQkJZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIC8vIE9wY2lvbiBwYXJhIGludml0YWRvCiAgICAgICAgICAgICAgICAgICAgaWYoJF9HRVRbIm9wY2lvbiJdPT0naW4nKXsKCQkJCQkJLy8gU2kgdGllbmUgZWwgcm9sIHAgKFByb2Zlc29yKSBwb2RyYSBlbnRyYXIgYWwgaWYuCgkJCQkJCWlmKCRfU0VTU0lPTlsicm9sIl0gPT0gInAiKXsKCQkJCQkJCS8vIEVqZWN1dGEgdW4gc2NyaXB0LCBwYXJhIGFicmlyIGxhIHZlbnRhbmEgbW9kYWwuCgkJCQkJCQllY2hvICc8c2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCSQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CgkJCQkJCQkkKCIjdmVudGFuYWludml0YXJncnVwbyIpLm1vZGFsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAJfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIAk8L3NjcmlwdD4nOwoJCQkJCQl9ZWxzZQoJCQkJCQkJZWNobyAnPHNjcmlwdD4gZXJyb3IoKTsgPC9zY3JpcHQ+JzsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3BjaW9uIHBhcmEgZXhwdWxzYXIKCQkJCQkJLy8gU2kgZW4gbGEgdXJsLCB0aWVuZSBsYSBvcGNpb24gZXgsIGVzdGEgZGVmaW5hZGEgY29ycmVvIHkgbGEgaWQgZW50cmEuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRfR0VUWyJvcGNpb24iXT09J2V4JyBhbmQgaXNzZXQoJF9HRVRbImNvcnJlbyJdKSBhbmQgaXNzZXQoJF9HRVRbImlkIl0pKXsKCQkJCQkJCS8vIEFsZXJ0YSBwYXJhIHF1ZSBzZSBjb25maXJtYSBsYSBleHB1bHNpb24gZGUgYWxndWllbiBkZWwgZ3J1cG8KCQkJCQkJCWVjaG8gIjxzY3JpcHQ+CgkJCQkJCQlTd2FsLmZpcmUoewoJCQkJCQkJICB0aXRsZTogJ8K/RXN0YXMgc2VndXJvIGRlIGV4cHVsc2FyIGEgIj8+PD9waHAgZWNobyAkX0dFVFsiY29ycmVvIl0gPz48P3BocCBlY2hvICI/JywKCQkJCQkJCSAgc2hvd0RlbnlCdXR0b246IHRydWUsCgkJCQkJCQkgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLAoJCQkJCQkJICBjb25maXJtQnV0dG9uVGV4dDogJ1NpJywKCQkJCQkJCSAgZGVueUJ1dHRvblRleHQ6ICdObyBleHB1bHNhcicsCgkJCQkJCQkgIGFsbG93T3V0c2lkZUNsaWNrOiBmYWxzZSwKCQkJCQkJCX0pLnRoZW4oKHJlc3VsdCkgPT4gewoJCQkJCQkJICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSAvKiBTaSBsZSBkYSBhbCBib3RvbiBjb25maXJtYXIsIGVsaW1pbmEgZWwgdXN1YXJpby4qL3sKCQkJCQkJCSAgCQkvLyBHdWFyZG8gbGFzIHZhcmlhYmxlcyBkZWwgY29ycmVvIChleHB1bHNhcikgeSBsYSBpZCBkZWwgZ3J1cG8KCQkJCQkJCQkJdmFyIGNvcnJlZXhwdWxzYWRvPSAnIj8+PD9waHAgZWNobyAkX0dFVFsiY29ycmVvIl0gPz48P3BocCBlY2hvICInOwoJCQkJCQkJCQl2YXIgbGFpZGdydXBvPSAnIj8+PD9waHAgZWNobyAkX0dFVFsiaWQiXSA/Pjw/cGhwIGVjaG8gIic7CiAKCQkJCQkJCQkJLy8gRW52aWFtb3MgbGEgdmFyaWFibGUgZGUgamF2YXNjcmlwdCBhIGFyY2hpdm8ucGhwCgkJCQkJCQkJCSQucG9zdCgnZXhwdWxzYXIucGhwJyx7J2NvcnJlZXhwdWxzYWRvJzpjb3JyZWV4cHVsc2FkbywgJ2xhaWRncnVwbyc6bGFpZGdydXBvfSxmdW5jdGlvbihyZXNwdWVzdGEpewoJCQkJCQkJCQkJLy9hbGVydChyZXNwdWVzdGEpOwoJCQkJCQkJCQkJLy8gU2kgc2UgcmVjaWJlIHVuIFNpLCBzaWduaWZpY2EgcXVlIGZ1ZSBlbGltaW5hZG8gdG9kby4KCQkJCQkJCQkJCWlmKHJlc3B1ZXN0YSA9PSAnU2knKXsKCQkJCQkJCQkJCQlTd2FsLmZpcmUoewoJCQkJCQkJCQkJCSAgaWNvbjogJ3N1Y2Nlc3MnLAoJCQkJCQkJCQkJCSAgdGl0bGU6ICdDb3JyZWN0bycsCgkJCQkJCQkJCQkJICB0ZXh0OiAnRXhwdWxzYWRvIENvcnJlY3RhbWVudGUnLAoJCQkJCQkJCQkJCSAgY29uZmlybUJ1dHRvbkNvbG9yOiAnIzMwODVkNicsCgkJCQkJCQkJCQkJICBjYW5jZWxCdXR0b25Db2xvcjogJyNkMzMnLAoJCQkJCQkJCQkJCSAgY29uZmlybUJ1dHRvblRleHQ6ICdBY3R1YWxpemFyJywKCQkJCQkJCQkJCQkgIGFsbG93T3V0c2lkZUNsaWNrOiBmYWxzZQoJCQkJCQkJCQkJCX0pLnRoZW4oKHJlc3VsdCkgPT4gewoJCQkJCQkJCQkJCSAgaWYgKHJlc3VsdC5pc0NvbmZpcm1lZCl7CgkJCQkJCQkJCQkJCQl3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdodHRwczovLzIyLjJkYXcuZXN2aXJndWEuY29tL2FtaWdvaW52aXNpYmxlL3JlZ2lzdHJhZG8vZ3J1cG9zLnBocCc7CgkJCQkJCQkJCQkJICB9ZWxzZQoJCQkJCQkJCQkJCQkJd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnaHR0cHM6Ly8yMi4yZGF3LmVzdmlyZ3VhLmNvbS9hbWlnb2ludmlzaWJsZS9yZWdpc3RyYWRvL2dydXBvcy5waHAnOwoJCQkJCQkJCQkJCX0pCgkJCQkJCQkJCQl9CgkJCQkJCQkJCX0pOwoJCQkJCQkJICB9IAoJCQkJCQkJICBlbHNlIAoJCQkJCQkJICAJaWYgKHJlc3VsdC5pc0RlbmllZCkgLyogU2kgbGUgZGEgYWwgYm90b24gY2FuY2VsYXIsIGNhbmNlbGEgbGEgZWxpbWluYWNpb24uKi97CgkJCQkJCQkJCS8vIExvIHJlZGlyZWNpb25hIGEgbGEgcGFnaW5hIHByaW5jaXBhbC4KCQkJCQkJCQkJd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnaHR0cDovLzIyLjJkYXcuZXN2aXJndWEuY29tL2FtaWdvaW52aXNpYmxlL3JlZ2lzdHJhZG8vZ3J1cG9zLnBocCc7CgkJCQkJCQkgIAl9CgkJCQkJCQl9KQoJCQkJCQkJPC9zY3JpcHQ+IjsKICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkX0dFVFsib3BjaW9uIl09PSdleCcpewoJCQkJCQkJCS8vIFNpIHRpZW5lIGVsIHJvbCBwIChQcm9mZXNvcikgcG9kcmEgZW50cmFyIGFsIGlmLgoJCQkJCQkJCWlmKCRfU0VTU0lPTlsicm9sIl0gPT0gInAiKXsKCQkJCQkJCQkJLy8gRWplY3V0YSB1biBzY3JpcHQsIHBhcmEgYWJyaXIgbGEgdmVudGFuYSBtb2RhbC4KCQkJCQkJCQkJZWNobyAnPHNjcmlwdD4KCQkJCQkJCQkJCSQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7CgkJCQkJCQkJCQkgICQoIiN2ZW50YW5hZXhwdWxzYXJpbnZpdGFyZ3J1cG8iKS5tb2RhbCgpOwoJCQkJCQkJCQkJfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCTwvc2NyaXB0Pic7CgkJCQkJCQkJfQoJCQkJCQkJCWVsc2UKCQkJCQkJCQkJZWNobyAnPHNjcmlwdD4gZXJyb3IoKTsgPC9zY3JpcHQ+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRfR0VUWyJvcGNpb24iXT09J3N1YmlyJyl7CgkJCQkJCQkJCS8vIEVqZWN1dGEgdW4gc2NyaXB0LCBwYXJhIGFicmlyIGxhIHZlbnRhbmEgbW9kYWwuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxzY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIjdmVudGFuYXNidWlycmVnYWxvIikubW9kYWwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NjcmlwdD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkX0dFVFsib3BjaW9uIl09PSdlbXAnKXsKCQkJCQkJCQkJCS8vIFNpIHRpZW5lIGVsIHJvbCBwIChQcm9mZXNvcikgcG9kcmEgZW50cmFyIGFsIGlmLgoJCQkJCQkJCQkJaWYoJF9TRVNTSU9OWyJyb2wiXSA9PSAicCIpewoJCQkJCQkJCQkJCS8vIEVqZWN1dGEgdW4gc2NyaXB0LCBwYXJhIGFicmlyIGxhIHZlbnRhbmEgbW9kYWwuCgkJCQkJCQkJCQkJZWNobyAnPHNjcmlwdD4KCQkJCQkJCQkJCQkJJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKCQkJCQkJCQkJCQkJICAkKCIjdmVudGFuYWVtcGFyZWphciIpLm1vZGFsKCk7CgkJCQkJCQkJCQkJCX0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCTwvc2NyaXB0Pic7CgkJCQkJCQkJCQl9ZWxzZQoJCQkJCQkJCQkJCWVjaG8gJzxzY3JpcHQ+IGVycm9yKCk7IDwvc2NyaXB0Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewoJCQkJCQkJCQkJaWYoJF9HRVRbIm9wY2lvbiJdPT0nZGVsZ3J1cCcpewoJCQkJCQkJCQkJCS8vIFNpIHRpZW5lIGVsIHJvbCBwIChQcm9mZXNvcikgcG9kcmEgZW50cmFyIGFsIGlmLgoJCQkJCQkJCQkJCWlmKCRfU0VTU0lPTlsicm9sIl0gPT0gInAiKXsKCQkJCQkJCQkJCQkJLy8gQWxlcnRhIHBhcmEgcXVlIHNlIGNvbmZpcm1hIGxhIGV4cHVsc2lvbiBkZSBhbGd1aWVuIGRlbCBncnVwbwoJCQkJCQkJCQkJCQllY2hvICI8c2NyaXB0PgoJCQkJCQkJCQkJCQlTd2FsLmZpcmUoewoJCQkJCQkJCQkJCQkgIHRpdGxlOiAnwr9Fc3RhcyBzZWd1cm8gZGUgZWxpbWluYXIgZWwgZ3J1cG8/JywKCQkJCQkJCQkJCQkJICBzaG93RGVueUJ1dHRvbjogdHJ1ZSwKCQkJCQkJCQkJCQkJICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwKCQkJCQkJCQkJCQkJICBjb25maXJtQnV0dG9uVGV4dDogJ1NpJywKCQkJCQkJCQkJCQkJICBkZW55QnV0dG9uVGV4dDogJ05vIGVsaW1pbmFyJywKCQkJCQkJCQkJCQkJICBhbGxvd091dHNpZGVDbGljazogZmFsc2UsCgkJCQkJCQkJCQkJCX0pLnRoZW4oKHJlc3VsdCkgPT4gewoJCQkJCQkJCQkJCQkgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIC8qIFNpIGxlIGRhIGFsIGJvdG9uIGNvbmZpcm1hciwgZWxpbWluYSBlbCB1c3VhcmlvLiovewoJCQkJCQkJCQkJCQkJCS8vIEd1YXJkbyBsYXMgdmFyaWFibGVzIGRlbCBjb3JyZW8gKGV4cHVsc2FyKSB5IGxhIGlkIGRlbCBncnVwbwoJCQkJCQkJCQkJCQkJCXZhciBjb3JyZWVwcm9waWV0YXJpbz0gJyI/Pjw/cGhwIGVjaG8gJF9TRVNTSU9OWyJjb3JyZW8iXSA/Pjw/cGhwIGVjaG8gIic7CgkJCQkJCQkJCQkJCQkJdmFyIGxhaWRncnVwbz0gJyI/Pjw/cGhwIGVjaG8gJF9HRVRbImlkIl0gPz48P3BocCBlY2hvICInOwoKCQkJCQkJCQkJCQkJCQkvLyBFbnZpYW1vcyBsYSB2YXJpYWJsZSBkZSBqYXZhc2NyaXB0IGEgYXJjaGl2by5waHAKCQkJCQkJCQkJCQkJCQkkLnBvc3QoJ2VsaW1pbmFyZ3J1cG8ucGhwJyx7J2NvcnJlZXByb3BpZXRhcmlvJzpjb3JyZWVwcm9waWV0YXJpbywgJ2xhaWRncnVwbyc6bGFpZGdydXBvfSxmdW5jdGlvbihyZXNwdWVzdGEpewoJCQkJCQkJCQkJCQkJCQkvL2FsZXJ0KHJlc3B1ZXN0YSk7CgkJCQkJCQkJCQkJCQkJCS8vIFNpIHNlIHJlY2liZSB1biBTaSwgc2lnbmlmaWNhIHF1ZSBmdWUgZWxpbWluYWRvIHRvZG8uCgkJCQkJCQkJCQkJCQkJCWlmKHJlc3B1ZXN0YSA9PSAnU2knKXsKCQkJCQkJCQkJCQkJCQkJCVN3YWwuZmlyZSh7CgkJCQkJCQkJCQkJCQkJCQkgIGljb246ICdzdWNjZXNzJywKCQkJCQkJCQkJCQkJCQkJCSAgdGl0bGU6ICdDb3JyZWN0bycsCgkJCQkJCQkJCQkJCQkJCQkgIHRleHQ6ICdHcnVwbyBFbGltaW5hZG8gQ29ycmVjdGFtZW50ZScsCgkJCQkJCQkJCQkJCQkJCQkgIGNvbmZpcm1CdXR0b25Db2xvcjogJyMzMDg1ZDYnLAoJCQkJCQkJCQkJCQkJCQkJICBjYW5jZWxCdXR0b25Db2xvcjogJyNkMzMnLAoJCQkJCQkJCQkJCQkJCQkJICBjb25maXJtQnV0dG9uVGV4dDogJ0FjdHVhbGl6YXInLAoJCQkJCQkJCQkJCQkJCQkJICBhbGxvd091dHNpZGVDbGljazogZmFsc2UKCQkJCQkJCQkJCQkJCQkJCX0pLnRoZW4oKHJlc3VsdCkgPT4gewoJCQkJCQkJCQkJCQkJCQkJICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKXsKCQkJCQkJCQkJCQkJCQkJCSAgCXdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJ2h0dHBzOi8vMjIuMmRhdy5lc3Zpcmd1YS5jb20vYW1pZ29pbnZpc2libGUvcmVnaXN0cmFkby9ncnVwb3MucGhwJzsKCQkJCQkJCQkJCQkJCQkJCSAgfWVsc2V7CgkJCQkJCQkJCQkJCQkJCQkJd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnaHR0cHM6Ly8yMi4yZGF3LmVzdmlyZ3VhLmNvbS9hbWlnb2ludmlzaWJsZS9yZWdpc3RyYWRvL2dydXBvcy5waHAnOwoJCQkJCQkJCQkJCQkJCQkJICB9CgkJCQkJCQkJCQkJCQkJCQl9KQoJCQkJCQkJCQkJCQkJCQl9CgkJCQkJCQkJCQkJCQkJfSk7CgkJCQkJCQkJCQkJCSAgfWVsc2UgCgkJCQkJCQkJCQkJCQlpZiAocmVzdWx0LmlzRGVuaWVkKSAvKiBTaSBsZSBkYSBhbCBib3RvbiBjYW5jZWxhciwgY2FuY2VsYSBsYSBlbGltaW5hY2lvbi4qL3sKCQkJCQkJCQkJCQkJCQkvLyBMbyByZWRpcmVjaW9uYSBhIGxhIHBhZ2luYSBwcmluY2lwYWwuCgkJCQkJCQkJCQkJCQkJd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnaHR0cDovLzIyLjJkYXcuZXN2aXJndWEuY29tL2FtaWdvaW52aXNpYmxlL3JlZ2lzdHJhZG8vZ3J1cG9zLnBocCc7CgkJCQkJCQkJCQkJCQl9CgkJCQkJCQkJCQkJCX0pCgkJCQkJCQkJCQkJCTwvc2NyaXB0PiI7CgkJCQkJCQkJCQkJfWVsc2UgLy8gTm8gdGllbmUgZXNlIHJvbAoJCQkJCQkJCQkJCQllY2hvICc8c2NyaXB0PiBlcnJvcigpOyA8L3NjcmlwdD4nOwoJCQkJCQkJCQkJfQoJCQkJCQkJCQl9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgPz4KCQkKICAgICAgICA8IS0tIENhYmV6ZXJhIC0gTmF2ZWdhZG9yIC0tPgogICAgICAgIDxoZWFkZXIgY2xhc3M9ImQtZmxleCBmbGV4LXdyYXAgYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIganVzdGlmeS1jb250ZW50LW1kLWJldHdlZW4gcHktMyBtYi00Ij4KICAgICAgICAgICAgPCEtLSBJbWFnZW4gZGUgbGEgY29ycG9hdGl2YSAtLT4KICAgICAgICAgICAgPGEgaHJlZj0iIiBjbGFzcz0iZC1mbGV4IGZsZXgtd3JhcCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtbGctc3RhcnQiPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vZnVuZGFjaW9ubG95b2xhLmNvbS92Z3VhZGFsdXBlL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE5LzEyL2xvZ290aXBvLnBuZyIgYWx0PSJJbWFnZW4gQ29ycG9yYXRpdmEgZGVsIENvbGVnaW8iIHdpZHRoPSIxNzAiIGhlaWdodD0iODYiIHRpdGxlPSJsb2dvdGlwbyI+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPCEtLSBPcGNpb25lcyBkZWwgbmF2ZWdhZG9yIC0tPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBjb2wtMTIgY29sLWxnLWF1dG8gbWUtbGctYXV0byBtYi0yIGp1c3RpZnktY29udGVudC1jZW50ZXIgbWItbWQtMCI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cDovLzIyLjJkYXcuZXN2aXJndWEuY29tL2FtaWdvaW52aXNpYmxlL3JlZ2lzdHJhZG8vIiBjbGFzcz0ibmF2LWxpbmsgcHgtMiBsaW5rLXNlY29uZGFyeSI+SW5pY2lvPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cDovLzIyLjJkYXcuZXN2aXJndWEuY29tL2FtaWdvaW52aXNpYmxlL3JlZ2lzdHJhZG8vZ3J1cG9zLnBocCIgY2xhc3M9Im5hdi1saW5rIHB4LTIgbGluay1kYXJrIj5NaXMgZ3J1cG9zPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9oZWFkZXI+CgogICAgICAgIDwhLS0gQ2FiZWNlcmEsIHRpdHVsbyBkZWwgc2l0aW8gY29uIGZvdG8gLS0+CiAgICAgICAgPGRpdiBpZD0iY2FiZXplcmEiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWJlemVyYS10aXR1bG8iPkFtaWdvIEludmlzaWJsZTwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIENvbnRlbmVkb3IgLS0+CiAgICAgICAgPGRpdiBjbGFzcz0icHktNSB0ZXh0LWNlbnRlciBjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHktbGctNSBjYW5jZWxhcnBhZGRpbmd0b3AiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgY29sLW1kLTggbXgtYXV0byI+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBUaXR1bG8gLS0+CiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJmdy1saWdodCI+TWlzIEdydXBvczwvaDE+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBTZXBhcmFkb3IgLS0+CiAgICAgICAgICAgICAgICAgICAgPGhyIGNsYXNzPSJyYXlhcyI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gQ29udGVuZWRvciBkZSBncnVwbyAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJhbGJ1bSBweS01IGJnLWxpZ2h0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyByb3ctY29scy0xIHJvdy1jb2xzLXNtLTIgcm93LWNvbHMtbWQtMyBnLTMiPgogICAgICAgICAgICAgICAgICAgIDwhLS0gQnVjbGUgQ2FyZCAtLT4KICAgICAgICAgICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBsYSB2YXJpYWJsZSAkX1NFU1NJT05bInJvbCJdIGNvbnRpZW5lIHVuYSAicCIgZW50cmEgYWwgaWYsIGVuIGNhc28gY29udHJhcmlvIGFsIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF9TRVNTSU9OWyJyb2wiXSA9PSAicCIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29uc3VsdGEsIGRvbmRlIHNhY2EgbGEgaW5mb3JtYWNpb24gZG9uZGUgZWwgdXN1YXJpbyBxdWUgc2Ugb2J0aWVuZSBkZSAkX1NFU1NJT05bImNvcnJlbyJdLCBzZWEgcHJvcGlldGFyaW8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29uc3VsdGEgPSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VMRUNUIHVzdWFyaW9zLklEVXN1YXJpbywgdXN1YXJpb3MuQ29ycmVvLCBncnVwb3MuTm9tYnJlLCBncnVwb3MuSURHcnVwbywgZ3J1cG9zLkZlY2hhX0ZpbiwgZ3J1cG9zLlByb3BpZXRhcmlvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRlJPTSB1c3VhcmlvcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOTkVSIEpPSU4gZ3J1cG9zIE9OIHVzdWFyaW9zLklEVXN1YXJpbz1ncnVwb3MuUHJvcGlldGFyaW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXSEVSRSB1c3Vhcmlvcy5Db3JyZW8gPSAnIi4kX1NFU1NJT05bImNvcnJlbyJdLiInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1JERVIgQlkgZ3J1cG9zLkZlY2hhX0ZpbiBBU0MiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wcmludF9yKCRjb25zdWx0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqZXRvLT5yZWFsaXphckNvbnN1bHRhcygkY29uc3VsdGEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbXBydWViYSBzaSBkZXZ1ZWx2ZSBvIG5vIGZpbGFzIGxhIGNvbnN1bHRhLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW4gY2FzbyBkZXZvbHZlciBzaWduaWZpY2EgcXVlIGVzZSB1c3VhcmlvIGVzIHByb3BpZXRhcmlvIGRlIHVuIGdydXBvIHkgZWplY3V0YSBlbiBidWNsZSBsYSBpbmZvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW4gY2FzbyBxdWUgbm8gZGV2dWVsdmEgc2lnbmljaWEgcXVlIGVzZSB1c3VhcmlvIG5vIGVzIHByb3BpZXRhcmlvIGRlIG5pbmd1biBncnVwby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRvYmpldG8tPmNvbXByb2JhckZpbGEoKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWVyIGZpbGFzIC0gQnVjbGUgcGFyYSB0b2RvcyBsb3MgZ3J1cG9zIHF1ZSBnZXN0aW9uZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWUgbGFzIGZpbHNhIGRlIGxhIGNvbnN1bHRhLCB5IGxvIHZhIG1vc3RyYW5kbyBjb24gc3VzIGRpZmVyZW5lcyBvcGNpb25lcyBkZSBnZXN0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKCRmaWxhID0gJG9iamV0by0+ZXh0cmFlckZpbGFzKCkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8ZGl2IGNsYXNzPSJjb2wgY2FyZHRhbWFubyI+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxkaXYgY2xhc3M9ImNhcmQgc2hhZG93LXNtIj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxkaXYgY2xhc3M9ImNhcmQtYm9keSI+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGg1IGNsYXNzPSJjYXJkLXRpdGxlIj4nLiRmaWxhWyJOb21icmUiXS4nPC9oNT4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8cCBjbGFzcz0iY2FyZC10ZXh0Ij4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICdGZWNoYSBSZXBhcnRvOiAnLiRmaWxhWyJGZWNoYV9GaW4iXS4nJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPC9wPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1jZW50ZXIgY2FyZGJvdG9uZXMiPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8ZGl2IGNsYXNzPSJidG4tZ3JvdXAgcm93IHJvdy1jb2xzLTEgcm93LWNvbHMtc20tMSByb3ctY29scy1tZC0yIHJvdy1jb2xzLWxnLTQgZy0zIj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxhIGhyZWY9ImdydXBvcy5waHA/aWQ9Jy4kZmlsYVsiSURHcnVwbyJdLicmb3BjaW9uPWVkIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSI+RWRpdGFyPC9hPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGEgaHJlZj0iZ3J1cG9zLnBocD9pZD0nLiRmaWxhWyJJREdydXBvIl0uJyZvcGNpb249aW4iIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc20gYnRuLW91dGxpbmUtc2Vjb25kYXJ5Ij5JbnZpdGFyPC9hPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGEgaHJlZj0iZ3J1cG9zLnBocD9pZD0nLiRmaWxhWyJJREdydXBvIl0uJyZvcGNpb249ZXgiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc20gYnRuLW91dGxpbmUtc2Vjb25kYXJ5Ij5FeHB1bHNhcjwvYT4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzxhIGhyZWY9ImdydXBvcy5waHA/aWQ9Jy4kZmlsYVsiSURHcnVwbyJdLicmb3BjaW9uPWVtcCIgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tb3V0bGluZS1zZWNvbmRhcnkiPkVtcGFyZWphcjwvYT4nOwoJCQkJCQkJCQkJCQkJCWVjaG8gJzxhIGhyZWY9ImdydXBvcy5waHA/aWQ9Jy4kZmlsYVsiSURHcnVwbyJdLicmb3BjaW9uPWRlbGdydXAiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc20gYnRuLW91dGxpbmUtc2Vjb25kYXJ5Ij5FbGltaW5hcjwvYT4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8L2Rpdj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgbGEgdmFyaWFibGUgJF9TRVNTSU9OWyJyb2wiXSwgY29udGllbmUgdW5hICJhIiBlbnRyYSBlbiBlbCBpZiwgZW4gY2FzbyBxdWUgbm8gbG8gc2VhIG5vIGhhY2UgbmFkYS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRfU0VTU0lPTlsicm9sIl0gPT0gImEiKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25zdWx0YS4gRG9uZGUgYnVzY2EgcXVlIGdydXBvIHBlcnRlbmVjZSBlbCB1c3VhcmlvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb25zdWx0YSA9ICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VMRUNUIHVzdWFyaW9zLklEVXN1YXJpbywgdXN1YXJpb3MuQ29ycmVvLCBncnVwb3MuSURHcnVwbywgZ3J1cG9zLk5vbWJyZSwgZ3J1cG9zLkZlY2hhX0luaWNpbywgZ3J1cG9zLkZlY2hhX0ZpbiwgZ3J1cG9zLlByb3BpZXRhcmlvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZST00gdXN1YXJpb3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5ORVIgSk9JTiB1c3VhcmlvZ3J1cG8gT04gdXN1YXJpb3MuSURVc3VhcmlvPXVzdWFyaW9ncnVwby5JRFVzdWFyaW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5ORVIgSk9JTiBncnVwb3MgT04gdXN1YXJpb2dydXBvLklER3J1cG89Z3J1cG9zLklER3J1cG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV0hFUkUgdXN1YXJpb3MuY29ycmVvID0gJyIuJF9TRVNTSU9OWyJjb3JyZW8iXS4iJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUkRFUiBCWSBncnVwb3MuRmVjaGFfRmluIEFTQyI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wcmludF9yKCRjb25zdWx0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9iamV0by0+cmVhbGl6YXJDb25zdWx0YXMoJGNvbnN1bHRhKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHF1ZSBkZXZ1ZWx2YSBmaWxhcyBsYSBjb25zdWx0YS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBkZXZ1ZWx2ZSBmaWxhcyBtb3N0cmFyYSBsb3MgZGF0b3MgZGUgbG9zIGdydXBvcyBxdWUgcGVydGVuZWNlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIG5vIGRldnVlbHZlIGZpbGFzIG5vIGhhcmEgbmFkYS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkb2JqZXRvLT5jb21wcm9iYXJGaWxhKCk+MCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhZXIgZmlsYXMgLSBCdWNsZSBwYXJhIHRvZG9zIGxvcyBncnVwb3MgcXVlIHBhcnRpY2lwYS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFlIGxhcyBmaWxhcyBkZSBsYSBjb25zdWx0YSB5IGxvIHZhIG1vc3RyYW5kbyBlbiBkaWZlcmVudGVzIHRhcmpldGFzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSgkZmlsYSA9ICRvYmpldG8tPmV4dHJhZXJGaWxhcygpKXsKCQkJCQkJCQkJCWVjaG8gJzxkaXYgY2xhc3M9ImNvbCBjYXJkdGFtYW5vIj4nOwoJCQkJCQkJCQkJCWVjaG8gJzxkaXYgY2xhc3M9ImNhcmQgc2hhZG93LXNtIj4nOwoJCQkJCQkJCQkJCQllY2hvICc8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPic7CgkJCQkJCQkJCQkJCQllY2hvICc8aDUgY2xhc3M9ImNhcmQtdGl0bGUiPicuJGZpbGFbIk5vbWJyZSJdLic8L2g1Pic7CgkJCQkJCQkJCQkJCQllY2hvICc8cCBjbGFzcz0iY2FyZC10ZXh0Ij4nOwoJCQkJCQkJCQkJCQkJCWVjaG8gJ0ZlY2hhIFJlcGFydG86ICcuJGZpbGFbIkZlY2hhX0ZpbiJdLicnOwoJCQkJCQkJCQkJCQkJZWNobyAnPC9wPic7CgkJCQkJCQkJCQkJCQllY2hvICc8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4gYWxpZ24taXRlbXMtY2VudGVyIGNhcmRib3RvbmVzIj4nOwoJCQkJCQkJCQkJCQkJCWVjaG8gJzxkaXYgY2xhc3M9ImJ0bi1ncm91cCByb3cgcm93LWNvbHMtMSByb3ctY29scy1zbS0xIHJvdy1jb2xzLW1kLTIgcm93LWNvbHMtbGctNCBnLTMiPic7CgkJCQkJCQkJCQkJCQkJCWVjaG8gJzxhIGhyZWY9ImdydXBvcy5waHA/aWQ9Jy4kZmlsYVsiSURHcnVwbyJdLicmb3BjaW9uPXN1YmlyIiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSI+U3ViaXIgUmVnYWxvPC9hPic7CgkJCQkJCQkJCQkJCQkJZWNobyAnPC9kaXY+JzsKCQkJCQkJCQkJCQkJCWVjaG8gJzwvZGl2Pic7CgkJCQkJCQkJCQkJCWVjaG8gJzwvZGl2Pic7CgkJCQkJCQkJCQkJZWNobyAnPC9kaXY+JzsKCQkJCQkJCQkJCWVjaG8gJzwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICA/PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIEJvdG9uIHBhcmEgYWdyZWdhciBncnVwb3MuIFNvbG8gcGVyZmlsIFByb2Zlc29yLS0+CiAgICAgICAgPD9waHAKCQkJLy8gU2kgJF9TRVNTSU9OWyJyb2wiXSBjb250aWVuZSBsYSBwLCBzaWduaWZpY2EgcXVlIGVzIHByb2Zlc29yLgogICAgICAgICAgICBpZigkX1NFU1NJT05bInJvbCJdPT0icCIpewogICAgICAgICAgICAgICAgZWNobyAnPGJ1dHRvbiBjbGFzcz0iYm90b25hZ3JlZ2FyIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjdmVudGFuYWNyZWFyZ3J1cG8iPic7CiAgICAgICAgICAgICAgICAgICAgZWNobyAnPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgdmlld0JveD0iMCAwIDI0IDI0IiBmaWxsPSJub25lIiBzdHJva2U9IiMwMDAwMDAiIHN0cm9rZS13aWR0aD0iMiIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIj4nOwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8Y2lyY2xlIGN4PSIxMiIgY3k9IjEyIiByPSIxMCI+PC9jaXJjbGU+JzsKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGxpbmUgeDE9IjEyIiB5MT0iOCIgeDI9IjEyIiB5Mj0iMTYiPjwvbGluZT4nOwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8bGluZSB4MT0iOCIgeTE9IjEyIiB4Mj0iMTYiIHkyPSIxMiI+PC9saW5lPic7CiAgICAgICAgICAgICAgICAgICAgZWNobyAnPC9zdmc+JzsKICAgICAgICAgICAgICAgIGVjaG8gJzwvYnV0dG9uPic7CiAgICAgICAgICAgIH0KICAgICAgICA/PgoKICAgICAgICA8IS0tIFZlbnRhbmEgTW9kYWwgLSBDcmVhciBHcnVwbyAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0idmVudGFuYWNyZWFyZ3J1cG8iIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9InRpdHVsb2NyZWFyZ3J1cG8iIGFyaWEtaGlkZGVuPSJ0cnVlIiBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBpZD0idGl0dWxvY3JlYXJncnVwbyI+Q3JlYXIgbnVldm8gR3J1cG88L2g1PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBtZXRob2Q9IlBPU1QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibm9tYnJlZ3J1cG8iIHJlcXVpcmVkPk5vbWJyZSBkZWwgR3J1cG8gPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0ibm9tYnJlZ3J1cG8iIG5hbWU9Im5vbWJyZWdydXBvIiBwbGFjZWhvbGRlcj0iTm9tYnJlIGRlbCBHcnVwbyIgcmVxdWlyZWQ+PGJyLz48YnIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZmVjaGFyZXBhcnRvIiByZXF1aXJlZD5GZWNoYSBkZWwgUmVwYXJvPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVjaG8gJzxpbnB1dCB0eXBlPSJkYXRlIiBpZD0iZmVjaGFyZXBhcnRvIiBuYW1lPSJ0cmlwLXN0YXJ0IiB2YWx1ZT0iJy4kZmVjaGFob3kuJyIgcmVxdWlyZWQ+JzsgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIGlkPSJjcmVhciIgdmFsdWU9IkNyZWFyIiBuYW1lPSJDcmVhciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vMjIuMmRhdy5lc3Zpcmd1YS5jb20vYW1pZ29pbnZpc2libGUvcmVnaXN0cmFkby9ncnVwb3MucGhwIiBjbGFzcz0iYnRuIGJ0bi13YXJuaW5nIGNhbmNlbGFyIiB0eXBlPSJidXR0b24iIGRhdGEtZGlzbWlzcz0ibW9kYWwiPkNhbmNlbGFyPC9hPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIFZlbnRhbmEgTW9kYWwgLSBFZGl0YXIgR3J1cG8gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InZlbnRhbmFlZGl0YXJncnVwbyIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0idGl0dWxvZWRpdGFyZ3J1cG8iIGFyaWEtaGlkZGVuPSJ0cnVlIiBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBpZD0idGl0dWxvZWRpdGFyZ3J1cG8iPkVkaXRhciBHcnVwbyA8P3BocCBlY2hvICcnLiRfR0VUWyJpZCJdLicnPz48L2g1PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBpZD0iZm9ybXVsYXJpb2VkaXRhciIgbWV0aG9kPSJQT1NUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJpZGdydXBvIiB2YWx1ZT0iPD9waHAgZWNobyAnJy4kX0dFVFsiaWQiXS4nJz8+Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im5vbWJyZWdydXBvMiIgPk51ZXZvIG5vbWJyZSBkZWwgR3J1cG88L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJub21icmVncnVwbzIiIG5hbWU9Im5vbWJyZWdydXBvMiIgcGxhY2Vob2xkZXI9Ik5vbWJyZSBkZWwgR3J1cG8iIHJlcXVpcmVkIC8+PGJyLz48YnIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZmVjaGFyZXBhcnRvIj5OdWV2YSBGZWNoYSBkZWwgUmVwYXJ0bzwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZGF0ZSIgaWQ9ImZlY2hhcmVwYXJ0bzIiIG5hbWU9InRyaXAtc3RhcnQiIHJlcXVpcmVkIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgoJCQkJCQk8YnV0dG9uIGlkPSJlZGl0YXIiIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiIHR5cGU9ImJ1dHRvbiIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFZGl0YXIKICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly8yMi4yZGF3LmVzdmlyZ3VhLmNvbS9hbWlnb2ludmlzaWJsZS9yZWdpc3RyYWRvL2dydXBvcy5waHAiIGNsYXNzPSJidG4gYnRuLXdhcm5pbmcgY2FuY2VsYXIiIHR5cGU9ImJ1dHRvbiIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+Q2FuY2VsYXI8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gVmVudGFuYSBNb2RhbCAtIEFncmVnYXIgSW52aXRhZG8gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InZlbnRhbmFpbnZpdGFyZ3J1cG8iIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9InRpdHVsb2ludml0YXJncnVwbyIgYXJpYS1oaWRkZW49InRydWUiIGRhdGEtYmFja2Ryb3A9InN0YXRpYyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyIgcm9sZT0iZG9jdW1lbnQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGlkPSJ0aXR1bG9pbnZpdGFyZ3J1cG8iPkludml0YXIgYWwgR3J1cG8gPD9waHAgZWNobyAnJy4kX0dFVFsiaWQiXS4nJz8+PC9oNT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9Imludml0YWRvZm9ybSIgbWV0aG9kPSJQT1NUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJpZGdydXBvaW52aXRhZG8iIHZhbHVlPSI8P3BocCBlY2hvICcnLiRfR0VUWyJpZCJdLicnPz4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iaW52aXRhZG9bXSI+Q29ycmVvIGRlbCBpbnZpdGFkbzwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIGlkPSJpbnZpdGFkb2NvcnJlbyIgY2xhc3M9ImlucHV0aW52aXRhciIgbmFtZT0iaW52aXRhZG9bXSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iYWdyZWdhcmZpbGEiPkFncmVnYXI8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJpbnZpdGFyIiBjbGFzcz0iYnRuIGJ0bi1zdWNjZXNzIiB0eXBlPSJidXR0b24iIGRhdGEtZGlzbWlzcz0ibW9kYWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW52aXRhcgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovLzIyLjJkYXcuZXN2aXJndWEuY29tL2FtaWdvaW52aXNpYmxlL3JlZ2lzdHJhZG8vZ3J1cG9zLnBocCIgY2xhc3M9ImJ0biBidG4td2FybmluZyBjYW5jZWxhciIgdHlwZT0iYnV0dG9uIiBkYXRhLWRpc21pc3M9Im1vZGFsIj5DYW5jZWxhcjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBWZW50YW5hIE1vZGFsIC0gRXhwdWxzYXIgSW52aXRhZG8gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InZlbnRhbmFleHB1bHNhcmludml0YXJncnVwbyIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0idGl0dWxvZXhwdWxzYXJpbnZpdGFyZ3J1cG8iIGFyaWEtaGlkZGVuPSJ0cnVlIiBkYXRhLWJhY2tkcm9wPSJzdGF0aWMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBpZD0idGl0dWxvZXhwdWxzYXJpbnZpdGFyZ3J1cG8iPkV4cHVsc2FyIGRlbCBHcnVwbyA8P3BocCBlY2hvICcnLiRfR0VUWyJpZCJdLicnPz48L2g1PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICA8P3BocAoJCQkJCQkJLy8gU2kgJF9HRVRbIm9wY2lvbiJdIGNvbnRpZW5lIGV4IGVudHJhIGVuIGVsIGlmLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF9HRVRbIm9wY2lvbiJdPT0nZXgnKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25zdWx0YS4gQnVzY2EgbG9zIGNvcnJlbyBxdWUgZXN0YW4gaW52aXRhZG8gYWwgZ3J1cG8gc2VsZWNpb25hZG8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnN1bHRhID0gIlNFTEVDVCAqIEZST00gaW52aXRhZG8gV0hFUkUgSURHcnVwbyA9ICciLiRfR0VUWyJpZCJdLiInIE9SREVSIEJZIENvcnJlbyBBU0M7IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqZXRvLT5yZWFsaXphckNvbnN1bHRhcygkY29uc3VsdGEpOwoKCQkJCQkJCQkvLyBTaSBzZSBvYnRpZW5lIGZpbGFzLCBzaWduaWZpY2EgcXVlIGhheSBjb3JyZW9zIGludml0YWRvcyBhIGVzZSBncnVwby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkb2JqZXRvLT5jb21wcm9iYXJGaWxhKCk+MCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKCRmaWxhID0gJG9iamV0by0+ZXh0cmFlckZpbGFzKCkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHRhYmxlPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHRyPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzx0ZD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGEgaHJlZj0iZ3J1cG9zLnBocD9pZD0nLiRmaWxhWyJJREdydXBvIl0uJyZvcGNpb249ZXgmY29ycmVvPScuJGZpbGFbIkNvcnJlbyJdLiciPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPGkgY2xhc3M9ImZhIGZhLXRyYXNoLW8iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L2k+ICc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8L2E+ICAnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAkZmlsYVsiQ29ycmVvIl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJzwvdGQ+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8L3RyPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8L3RhYmxlPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSAvLyBTaSBubyBoYXkgaW52aXRhZG9zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCWVjaG8gJzxzY3JpcHQ+IGVycm9yKCk7IDwvc2NyaXB0Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgID8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iZXhwdWxzYXIiIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiIHR5cGU9ImJ1dHRvbiIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeHB1bHNhcgogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KCQkJCQkJPGEgaHJlZj0iaHR0cDovLzIyLjJkYXcuZXN2aXJndWEuY29tL2FtaWdvaW52aXNpYmxlL3JlZ2lzdHJhZG8vZ3J1cG9zLnBocCIgY2xhc3M9ImJ0biBidG4td2FybmluZyBjYW5jZWxhciIgdHlwZT0iYnV0dG9uIiBkYXRhLWRpc21pc3M9Im1vZGFsIj5DYW5jZWxhcjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBWZW50YW5hIE1vZGFsIC0gU3ViaXIgUmVnYWxvIC0tPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJ2ZW50YW5hc2J1aXJyZWdhbG8iIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9InRpdHVsb3N1YmlycmVnYWxvIiBhcmlhLWhpZGRlbj0idHJ1ZSIgZGF0YS1iYWNrZHJvcD0ic3RhdGljIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDUgaWQ9InRpdHVsb3N1YmlycmVnYWxvIj5TdWJpciBSZWdhbG8gPD9waHAgZWNobyAnZ3J1cG8gJy4kX0dFVFsiaWQiXS4nJz8+PC9oNT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0IiBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJ1c3VhcmlvcmVnYWxvIiB2YWx1ZT0iPD9waHAgZWNobyAnJy4kX1NFU1NJT05bImNvcnJlbyJdLicnOyA/PiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgaWQ9ImdydXBvcmVnYWxvIiB2YWx1ZT0iPD9waHAgZWNobyAnJy4kX0dFVFsiaWQiXS4nJzsgPz4iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InJlZ2FsbyI+U3ViZSB0dSBSZWdhbG8uPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJmaWxlIiBuYW1lPSJhcmNoaXZvIiBpZD0icmVnYWxvIiBtYXhsZW5ndGg9IjQ1IiByZXF1aXJlZC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBpZD0ic3ViaXJlZ2FsbyIgdmFsdWU9IlN1YmlyIiBuYW1lPSJTdWJpciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGV4aXN0ZSBsYSB2YXJpYWJsZSAkX0ZJTEVTWydhcmNoaXZvJ10gZW50cmEgZW4gZWwgaWYuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpc3NldCgkX0ZJTEVTWydhcmNoaXZvJ10pKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHdWFyZGFyIGVuIHZhcmlhYmxlcyBsb3MgZGF0b3MgcXVlIHNlIGVudmlhcm9uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRub21icmV0ZW1wID0gJF9GSUxFU1snYXJjaGl2byddWyd0bXBfbmFtZSddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRub21icmVyZWdhbG8gPSAkX0ZJTEVTWydhcmNoaXZvJ11bJ25hbWUnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZm9ybWF0byA9ICRfRklMRVNbJ2FyY2hpdm8nXVsndHlwZSddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2b2x1bWVuID0gJF9GSUxFU1snYXJjaGl2byddWydzaXplJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGdydXBvaWQgPSAkX0dFVFsiaWQiXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29ycmVvdXN1YXJpbyA9ICRfU0VTU0lPTlsiY29ycmVvIl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZlY2hhaG95ID0gZGF0ZSgnWS1tLWQnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZWwgZm9ybWF0byBlcyBkZXNjb25vY2lkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRmb3JtYXRvID09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIE9SICRmb3JtYXRvID09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAnPHNjcmlwdD4gZXJyb3J0aXBvYXJjaGl2bygpOyA8L3NjcmlwdD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25zdWx0YSBsYSBjdWFsIGRldnVlbHZlIGZpbGFzIHNpIGVzZSB1c3VhcmlvIHlhIHN1YmlvIGFsZ3VuIHJlZ2Fsby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnN1bHRhID0gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VMRUNUIHVzdWFyaW9zLkNvcnJlbywgdXN1YXJpb3MuSURVc3VhcmlvLCByZWdhbG8uSURSZWdhbG8sIHJlZ2Fsby5HcnVwbywgcmVnYWxvLk5vbWJyZSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZST00gdXN1YXJpb3MKCQkJCQkJCQkJCUlOTkVSIEpPSU4gcmVnYWxvIE9OIHJlZ2Fsby5Vc3VhcmlvID0gdXN1YXJpb3MuSURVc3VhcmlvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXSEVSRSB1c3Vhcmlvcy5Db3JyZW8gPSAnIi4kY29ycmVvdXN1YXJpby4iJyBBTkQgcmVnYWxvLkdydXBvID0gJGdydXBvaWQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZWNobyAkY29uc3VsdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvYmpldG8tPnJlYWxpemFyQ29uc3VsdGFzKCRjb25zdWx0YSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaSBkZXZ1ZWx2ZSBmaWxhcywgc2lnbmlmaWNhIHF1ZSBlc2UgdXN1YXJpbyB5YSBzdWJpbyBhbGd1biBjb3JyZW8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRvYmpldG8tPmNvbXByb2JhckZpbGEoKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlIGV4dHJhZSBsYXMgZmlsYXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmlsYSA9ICRvYmpldG8tPmV4dHJhZXJGaWxhcygpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlIGd1YXJkYSBlbiB1bmEgdmFyaWFibGUgZWwgbm9tYnJlIGRlbCByZWdhbG8gYW50ZXJpb3IuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbm9tYnJlcmVnYWxvYW50aWd1byA9ICRmaWxhWyJOb21icmUiXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpZHVzYXJ1aW8gPSAkZmlsYVsiSURVc3VhcmlvIl07CgkJCQkJCQkJCQkKCQkJCQkJCQkJCS8vIFNpIGVsIG5vbWJyZSBkZWwgcmVnYWxvIG51ZXZvIGVzIGlndWFsIGFsIHF1ZSBlc3RhIGd1YXJkYWRvIGVudHJhIGVuIGVsIGlmCgkJCQkJCQkJCQlpZigkbm9tYnJlcmVnYWxvID09ICRub21icmVyZWdhbG9hbnRpZ3VvKXsKCQkJCQkJCQkJCQkKCQkJCQkJCQkJCQkvLyBSZW5vbWJyYXIgZWwgYXJjaGl2byBkZWwgc2Vydmlkb3IKCQkJCQkJCQkJCQkkb2JqZXRvcHJvY2Vzb3NhcHAtPnJlbm9tYnJhcm1pc21vKCRncnVwb2lkLCAkY29ycmVvdXN1YXJpbywgJG5vbWJyZXJlZ2Fsb2FudGlndW8pOwoJCQkJCQkJCQkJCQoJCQkJCQkJCQkJCS8vIEZ1bmNpb24sIHNlIGxlIGVudmlhIGxvcyBkYXRvcyB5IHNpIHJldG9ybmEgdW4gU2kgZW50cmEuIFNpZ25pZmljYSBxdWUgc2Ugc3ViaW8gZWwgYXJjaGl2by4KCQkJCQkJCQkJCQlpZigkb2JqZXRvcHJvY2Vzb3NhcHAtPnN1YmlyYXJjaGl2bygkZ3J1cG9pZCwgJGNvcnJlb3VzdWFyaW8sICRub21icmV0ZW1wLCAkbm9tYnJlcmVnYWxvKSA9PSAiU2kiKXsKCQkJCQkJCQkJCQkJLy8gRnVuY2lvbiBxdWUgZWxpbWluYSBlbCBhcmNoaXZvIGFudGlndW8uIFNpIHJldG9ybmEgU2kgZW50cmEuIFNpZ25maWNpYSBxdWUgc2UgZWxpbWluby4KCQkJCQkJCQkJCQkJaWYoJG9iamV0b3Byb2Nlc29zYXBwLT5lbGltaW5hcmFyY2hpdm8oJGdydXBvaWQsICRjb3JyZW91c3VhcmlvLCAkbm9tYnJlcmVnYWxvYW50aWd1bykgPT0gIlNpIil7CgkJCQkJCQkJCQkJCQkvLyBDb25zdWx0YS4gQWN0dWFsaXphciBsb3MgZGF0b3MgZGUgbGEgQkQgY29uIGVsIG51ZXZvIHJlZ2Fsby4KCQkJCQkJCQkJCQkJCSRjb25zdWx0YSA9ICIKCQkJCQkJCQkJCQkJCQlVUERBVEUgcmVnYWxvCgkJCQkJCQkJCQkJCQkJU0VUCgkJCQkJCQkJCQkJCQkJTm9tYnJlID0gJyRub21icmVyZWdhbG8nLAoJCQkJCQkJCQkJCQkJCVZvbHVtZW4gPSAkdm9sdW1lbiwKCQkJCQkJCQkJCQkJCQlGb3JtYXRvID0gJyRmb3JtYXRvJywKCQkJCQkJCQkJCQkJCQlSdXRhID0gJ2FtaWdvaW52aXNpYmxlL3JlZ2Fsb3MvJGdydXBvaWQvJGNvcnJlb3VzdWFyaW8nLAoJCQkJCQkJCQkJCQkJCUZlY2hhX1N1YmlkYSA9ICckZmVjaGFob3knLAoJCQkJCQkJCQkJCQkJCUdydXBvID0gJGdydXBvaWQsCgkJCQkJCQkJCQkJCQkJVXN1YXJpbyA9ICRpZHVzYXJ1aW8KCQkJCQkJCQkJCQkJCQlXSEVSRSBHcnVwbyA9ICRncnVwb2lkIEFORCBVc3VhcmlvID0gJGlkdXNhcnVpbzsKCQkJCQkJCQkJCQkJCSI7CgkJCQkJCQkJCQkJCQkkb2JqZXRvLT5yZWFsaXphckNvbnN1bHRhcygkY29uc3VsdGEpOwoKCQkJCQkJCQkJCQkJCS8vIFNpIGRldXZlbHZlIGZpbGFzIHNpZ25pZmljYSBxdWUgc2UgYWN0dWFsaXpvIGxvcyBkYXRvcy4KCQkJCQkJCQkJCQkJCWlmKCRvYmpldG8tPmNvbXByb2JhcigpPjApewoJCQkJCQkJCQkJCQkJCWVjaG8gJzxzY3JpcHQ+IGNvcnJlY3Rvc3ViaWRvKCk7IDwvc2NyaXB0Pic7CgkJCQkJCQkJCQkJCQl9ZWxzZQoJCQkJCQkJCQkJCQkJCWVjaG8gJzxzY3JpcHQ+IGVycm9yKCk7IDwvc2NyaXB0Pic7CgkJCQkJCQkJCQkJCX1lbHNlIC8vIEZhbGxvIGFsIGFjdHVhbGl6YXIgbG9zIGRhdG9zLgoJCQkJCQkJCQkJCQkJZWNobyAnPHNjcmlwdD4gZXJyb3IoKTsgPC9zY3JpcHQ+JzsKCQkJCQkJCQkJCQl9ZWxzZSAvLyBTaSBmYWxsbyBsYSBzdWJpZGEgZGVsIGFyY2hpdm8uCgkJCQkJCQkJCQkJZWNobyAnPHNjcmlwdD4gZXJyb3IoKTsgPC9zY3JpcHQ+JzsKCQkJCQkJCQkJCX1lbHNlewoJCQkJCQkJCQkJCS8vIEZ1bmNpb24sIHNlIGxlIGVudmlhIGxvcyBkYXRvcyB5IHNpIHJldG9ybmEgdW4gU2kgZW50cmEuIFNpZ25pZmljYSBxdWUgc2Ugc3ViaW8gZWwgYXJjaGl2by4KCQkJCQkJCQkJCQlpZigkb2JqZXRvcHJvY2Vzb3NhcHAtPnN1YmlyYXJjaGl2bygkZ3J1cG9pZCwgJGNvcnJlb3VzdWFyaW8sICRub21icmV0ZW1wLCAkbm9tYnJlcmVnYWxvKSA9PSAiU2kiKXsKCQkJCQkJCQkJCQkJLy8gRnVuY2lvbiBxdWUgZWxpbWluYSBlbCBhcmNoaXZvIGFudGlndW8uIFNpIHJldG9ybmEgU2kgZW50cmEuIFNpZ25maWNpYSBxdWUgc2UgZWxpbWluby4KCQkJCQkJCQkJCQkJaWYoJG9iamV0b3Byb2Nlc29zYXBwLT5lbGltaW5hcmFyY2hpdm8oJGdydXBvaWQsICRjb3JyZW91c3VhcmlvLCAkbm9tYnJlcmVnYWxvYW50aWd1bykgPT0gIlNpIil7CgkJCQkJCQkJCQkJCQkvLyBDb25zdWx0YS4gQWN0dWFsaXphciBsb3MgZGF0b3MgZGUgbGEgQkQgY29uIGVsIG51ZXZvIHJlZ2Fsby4KCQkJCQkJCQkJCQkJCSRjb25zdWx0YSA9ICIKCQkJCQkJCQkJCQkJCQlVUERBVEUgcmVnYWxvCgkJCQkJCQkJCQkJCQkJU0VUCgkJCQkJCQkJCQkJCQkJTm9tYnJlID0gJyRub21icmVyZWdhbG8nLAoJCQkJCQkJCQkJCQkJCVZvbHVtZW4gPSAkdm9sdW1lbiwKCQkJCQkJCQkJCQkJCQlGb3JtYXRvID0gJyRmb3JtYXRvJywKCQkJCQkJCQkJCQkJCQlSdXRhID0gJ2FtaWdvaW52aXNpYmxlL3JlZ2Fsb3MvJGdydXBvaWQvJGNvcnJlb3VzdWFyaW8nLAoJCQkJCQkJCQkJCQkJCUZlY2hhX1N1YmlkYSA9ICckZmVjaGFob3knLAoJCQkJCQkJCQkJCQkJCUdydXBvID0gJGdydXBvaWQsCgkJCQkJCQkJCQkJCQkJVXN1YXJpbyA9ICRpZHVzYXJ1aW8KCQkJCQkJCQkJCQkJCQlXSEVSRSBHcnVwbyA9ICRncnVwb2lkIEFORCBVc3VhcmlvID0gJGlkdXNhcnVpbzsKCQkJCQkJCQkJCQkJCSI7CgkJCQkJCQkJCQkJCQkkb2JqZXRvLT5yZWFsaXphckNvbnN1bHRhcygkY29uc3VsdGEpOwoKCQkJCQkJCQkJCQkJCS8vIFNpIGRldXZlbHZlIGZpbGFzIHNpZ25pZmljYSBxdWUgc2UgYWN0dWFsaXpvIGxvcyBkYXRvcy4KCQkJCQkJCQkJCQkJCWlmKCRvYmpldG8tPmNvbXByb2JhcigpPjApewoJCQkJCQkJCQkJCQkJCWVjaG8gJzxzY3JpcHQ+IGNvcnJlY3Rvc3ViaWRvKCk7IDwvc2NyaXB0Pic7CgkJCQkJCQkJCQkJCQl9ZWxzZQoJCQkJCQkJCQkJCQkJCWVjaG8gJzxzY3JpcHQ+IGVycm9yKCk7IDwvc2NyaXB0Pic7CgkJCQkJCQkJCQkJCX1lbHNlIC8vIEZhbGxvIGFsIGFjdHVhbGl6YXIgbG9zIGRhdG9zLgoJCQkJCQkJCQkJCQkJZWNobyAnPHNjcmlwdD4gZXJyb3IoKTsgPC9zY3JpcHQ+JzsKCQkJCQkJCQkJCQl9ZWxzZSAvLyBTaSBmYWxsbyBsYSBzdWJpZGEgZGVsIGFyY2hpdm8uCgkJCQkJCQkJCQkJCWVjaG8gJzxzY3JpcHQ+IGVycm9yKCk7IDwvc2NyaXB0Pic7CgkJCQkJCQkJCQl9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIC8qIFNpIGVudHJhIGFxdWkgc2lnbmlmaWNhIHF1ZSBlcyBsYSBwcmltZXJhIHN1YmlkYSBkZSByZWdhbG8uKi97CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25zdWx0YSBwYXJhIHNhY2FyIGxhIElEIGRlbCB1c3VhcmlvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnN1bHRhID0gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNFTEVDVCBJRFVzdWFyaW8sIENvcnJlbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZST00gdXN1YXJpb3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXSEVSRSBDb3JyZW8gPSAnJGNvcnJlb3VzdWFyaW8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZWNobyAkY29uc3VsdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqZXRvLT5yZWFsaXphckNvbnN1bHRhcygkY29uc3VsdGEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpIGRldnVlbHZlIGZpbGFzIHNpZ25pZmljYSBxdWUgZXhpc3RlIGVzZSB1c3VhcmlvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJG9iamV0by0+Y29tcHJvYmFyRmlsYSgpPjApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhaWdvIGxhcyBmaWxhcyBkZSBsYSBjb25zdWx0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmaWxhID0gJG9iamV0by0+ZXh0cmFlckZpbGFzKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEd1YXJkbyBlbiB1bmEgdmFyaWFibGUgbGEgaWQgZGVsIHVzdWFyaW8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlkdXN1YXJpbyA9ICRmaWxhWyJJRFVzdWFyaW8iXTsKCgkJCQkJCQkJCQkJLy9lY2hvICRncnVwb2lkLic8YnI+Jy4kY29ycmVvdXN1YXJpby4nPGJyPicuJG5vbWJyZXRlbXAuJzxicj4nLiRub21icmVyZWdhbG8uJzxicj4nOwoJCQkJCQkJCQkJCQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1Ymltb3MgZWwgcmVnYWxvIGVuIGVsIHNlcnZpZG9yLCBlbiBsYSBjYXJwZXRhIGRlbCBncnVwbyB5IHN1IGNvcnJlby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkb2JqZXRvcHJvY2Vzb3NhcHAtPnN1YmlyYXJjaGl2bygkZ3J1cG9pZCwgJGNvcnJlb3VzdWFyaW8sICRub21icmV0ZW1wLCAkbm9tYnJlcmVnYWxvKSA9PSAiU2kiKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lY2hvICc8c2NyaXB0PiBjb3JyZWN0b3N1YmlkbygpOyA8L3NjcmlwdD4nOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29uc3VsdGEuIEluc2VydGEgbG9zIGRhdG9zIGVuIGxhIHRhYmxhIHJlZ2FsbyBjb24gbG9zIGRhdG9zIHJlY2liaWRvIGRlbCBmb3JtdWxhcmlvIGRlIHN1YmlkYSBkZSByZWdhbG8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb25zdWx0YSA9ICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOU0VSVCBJTlRPIHJlZ2FsbyAoVm9sdW1lbiwgTm9tYnJlLCBGb3JtYXRvLCBSdXRhLCBGZWNoYV9TdWJpZGEsIEdydXBvLCBVc3VhcmlvKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVkFMVUVTICgkdm9sdW1lbiwgJyRub21icmVyZWdhbG8nLCAnJGZvcm1hdG8nLCAnYW1pZ29pbnZpc2libGUvcmVnYWxvcy8kZ3J1cG9pZC8kY29ycmVvdXN1YXJpbycsICckZmVjaGFob3knLCAkZ3J1cG9pZCwgJGlkdXN1YXJpbyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb2JqZXRvLT5yZWFsaXphckNvbnN1bHRhcygkY29uc3VsdGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2VjaG8gJGNvbnN1bHRhOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2kgZGV2dWVsdmUgZmlsYXMsIHNpZ25pZmljYSBxdWUgc2UgYWdyZWdvIGVuIGxhIGJkIGxvcyBkYXRvcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJG9iamV0by0+Y29tcHJvYmFyKCk+MCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8c2NyaXB0PiBjb3JyZWN0b3N1YmlkbygpOyA8L3NjcmlwdD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJZWNobyAnPHNjcmlwdD4gZXJyb3IoKTsgPC9zY3JpcHQ+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAllY2hvICc8c2NyaXB0PiBlcnJvcigpOyA8L3NjcmlwdD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCWVjaG8gJzxzY3JpcHQ+IGVycm9yKCk7IDwvc2NyaXB0Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgID8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovLzIyLjJkYXcuZXN2aXJndWEuY29tL2FtaWdvaW52aXNpYmxlL3JlZ2lzdHJhZG8vZ3J1cG9zLnBocCIgY2xhc3M9ImJ0biBidG4td2FybmluZyBjYW5jZWxhciIgdHlwZT0iYnV0dG9uIiBkYXRhLWRpc21pc3M9Im1vZGFsIj5DYW5jZWxhcjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCgogICAgICAgIDwhLS0gVmVudGFuYSBNb2RhbCAtIEVtcGFyZWphciAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0idmVudGFuYWVtcGFyZWphciIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0idGl0dWxvZW1wYXJlamFyIiBhcmlhLWhpZGRlbj0idHJ1ZSIgZGF0YS1iYWNrZHJvcD0ic3RhdGljIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLXhsIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDUgaWQ9InRpdHVsb2VtcGFyZWphciI+RW1wYXJlamFtaWVudG8gPD9waHAgZWNobyAnJy4kX0dFVFsiaWQiXS4nJz8+PC9oNT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAKCQkJCQkJCS8vIFNpIGxhIG9wY2lvbiBlcyBlbXAKCQkJCQkJCWlmKCRfR0VUWyJvcGNpb24iXT09J2VtcCcpewoKCQkJCQkJCQkvLyBDb25zdWx0YS4gU2lydmUgcGFyYSBtb3N0cmFyIGxvcyB1c3VhcmlvcyBkZWwgZ3J1cG8uCgkJCQkJCQkJJGNvbnN1bHRhID0gIgoJCQkJCQkJCQlTRUxFQ1QgZ3J1cG9zLklER3J1cG8sIHVzdWFyaW9zLklEVXN1YXJpbywgdXN1YXJpb3MuQ29ycmVvCgkJCQkJCQkJCUZST00gZ3J1cG9zCgkJCQkJCQkJCUlOTkVSIEpPSU4gdXN1YXJpb2dydXBvIE9OIHVzdWFyaW9ncnVwby5JREdydXBvID0gZ3J1cG9zLklER3J1cG8KCQkJCQkJCQkJSU5ORVIgSk9JTiB1c3VhcmlvcyBPTiB1c3Vhcmlvcy5JRFVzdWFyaW8gPSB1c3VhcmlvZ3J1cG8uSURVc3VhcmlvCgkJCQkJCQkJCVdIRVJFIGdydXBvcy5JREdydXBvID0gIi4kX0dFVFsiaWQiXS4iOwoJCQkJCQkJCSI7CgoJCQkJCQkJCS8vZWNobyAkY29uc3VsdGE7CgkJCQkJCQkJJG9iamV0by0+cmVhbGl6YXJDb25zdWx0YXMoJGNvbnN1bHRhKTsKCgkJCQkJCQkJLy8gU2kgZGV2dWVsdmUgZmlsYXMgc2lnbmlmaWNhIHF1ZSBlc2UgZ3J1cG8gdGllbmUgdXN1YXJpb3MuCgkJCQkJCQkJaWYoJG9iamV0by0+Y29tcHJvYmFyRmlsYSgpPjApewoJCQkJCQkJCQkKCQkJCQkJCQkJLy8gR3VhcmRhIHRvZG9zIGxvcyBjb3JyZW8gZW4gdW5hIGFycmF5LgoJCQkJCQkJCQl3aGlsZSgkZmlsYSA9ICRvYmpldG8tPmV4dHJhZXJGaWxhcygpKXsKCQkJCQkJCQkJCS8vIFZhIGd1YXJkYW5kbyBsbyBvYnRlbmlkbyBkZSBsYSBmaWxhIENvcnJlbyBlbiBsYSBhcnJheS4KCQkJCQkJCQkJCSRhcnJheWNvcnJlb1tdID0gJGZpbGFbIkNvcnJlbyJdOwoJCQkJCQkJCQl9CgoJCQkJCQkJCQkvLyBWaXN1YWxpemFyIGxhIGFycmF5LCBjb24gbGEgbGlzdGEgZGUgdXN1YXJpb3MgZGVsIGdydXBvLgoJCQkJCQkJCQkvKgoJCQkJCQkJCQlmb3JlYWNoKCRhcnJheSBhcyAkdmFsb3Jlcyl7CgkJCQkJCQkJCQllY2hvICR2YWxvcmVzLic8YnI+JzsKCQkJCQkJCQkJfQoJCQkJCQkJCQkqLwoKCQkJCQkJCQkJLy8gQ29udGFyIGVsIHRhbWHDsW8gZGUgbGEgYXJyYXkgeSBndWFyZGFybG8uCgkJCQkJCQkJCSRjb250YWRvciA9IGNvdW50KCRhcnJheWNvcnJlbyk7CgkJCQkJCQkJCS8vZWNobyAkY29udGFkb3I7CgoJCQkJCQkJCQkvLyBTaSBjb250YWRvciBlcyBpbXBhciBzYWx0YSBtZW5zYWplLgoJCQkJCQkJCQlpZigkY29udGFkb3IlIDIgIT0gMCApewoJCQkJCQkJCQkJZWNobyAnPHNjcmlwdD4gZXJyb3JpbXBhcnBhcmVqYSgpOyA8L3NjcmlwdD4nOwoJCQkJCQkJCQl9ZWxzZSAvKiBTb24gbnVtZXJvcyBwYXIgbGEgZ2VudGUuKi97CgkJCQkJCQkJCQkvLyRjb250YWRvcjIgPSAkY29udGFkb3ItMTsKCQkJCQkJCQkJCS8vIENyZWFyIHVuYSBhcnJheSwgbGEgY3VhbCBpcmUgYWdyZWdhbmRvIG51bWVyb3MgaGFzdGEgbGxlZ2FyIGEgJGNvbnRhZG9yLgoJCQkJCQkJCQkJZm9yICgkaSA9IDE7ICRpIDw9ICRjb250YWRvcjsgJGkrKyl7CgkJCQkJCQkJCQkJLy8gVmEgZ3VhcmRhbmRvIGVsIGNvbnRhZG9yIGVuIGxhIGFycmF5LgoJCQkJCQkJCQkJCSRhcnJheWNvbnRhZG9yW10gPSAkaTsKCQkJCQkJCQkJCX0KCgkJCQkJCQkJCQkvLyBWaXN1YWxpemFyIGxhIGFycmF5IGNvbnRhZG9yLgoJCQkJCQkJCQkJLyoKCQkJCQkJCQkJCWZvcmVhY2goJGFycmF5Y29udGFkb3IgYXMgJHZhbG9yKXsKCQkJCQkJCQkJCQllY2hvICR2YWxvci4nICc7CgkJCQkJCQkJCQl9CgkJCQkJCQkJCQkqLwoKCQkJCQkJCQkJCS8vIFZhcmlhYmxlIGNvbnRhZG9yLgoJCQkJCQkJCQkJJGkgPSAxOwoKCQkJCQkJCQkJCWVjaG8gJzx0YWJsZSBjbGFzcz0idGFibGUiPic7CgkJCQkJCQkJCQkJZWNobyAnPHRoZWFkPic7CgkJCQkJCQkJCQkJCWVjaG8gJzx0cj4nOwoJCQkJCQkJCQkJCQkJZWNobyAnPHRoPlBhcmVqYXM8L3RoPic7CgkJCQkJCQkJCQkJCQllY2hvICc8dGg+UXVpZW4gUmVnYWxhPC90aD4nOwoJCQkJCQkJCQkJCQkJZWNobyAnPHRoPkRlc3RpbmF0YXJpbzwvdGg+JzsKCQkJCQkJCQkJCQkJCWVjaG8gJzx0aD5SZWdhbG88L3RoPic7CgkJCQkJCQkJCQkJCWVjaG8gJzwvdHI+JzsKCQkJCQkJCQkJCQllY2hvICc8L3RoZWFkPic7CgkJCQkJCQkJCQkvLyBSZWNvcnJvIGxhIGFycmF5LCAkdmFsb3Igc29uIGxvcyBjb3JyZW9zLgoJCQkJCQkJCQkJZm9yZWFjaCgkYXJyYXljb3JyZW8gYXMgJHZhbG9yKXsKCQkJCQkJCQkJCQkkcmFuZG9tPWFycmF5X3JhbmQoJGFycmF5Y29udGFkb3IsMSk7CgoJCQkJCQkJCQkJCS8vZWNobyAkdmFsb3IuJ3wnLiRhcnJheWNvcnJlb1skcmFuZG9tXS4nPGJyPic7CgoJCQkJCQkJCQkJCS8vIFNpIGVsICR2YWxvcihRdWllbiBSZWdhbGEpIGVzIGlndWFsIGEgJGFycmF5Y29ycmVvWyRyYW5kb21dKERlc3RpbmF0YXJpbyByYW5kb20pIGVudHJhIGVuIGVsIGlmCgkJCQkJCQkJCQkJaWYoJHZhbG9yID09ICRhcnJheWNvcnJlb1skcmFuZG9tXSl7CgkJCQkJCQkJCQkJCS8vIFNlIHZ1ZWx2ZSBhIGJhcmFqYXIKCQkJCQkJCQkJCQkJJHJhbmRvbT1hcnJheV9yYW5kKCRhcnJheWNvbnRhZG9yLDEpOwoKCQkJCQkJCQkJCQkJLy8gU2kgdnVlbHZlIGEgc2VyIGlndWFsIGVudHJhIGVuIGVsIGlmLCB5IHJlaW5pY2lhIGxhIHBhZ2luYS4KCQkJCQkJCQkJCQkJaWYoJHZhbG9yID09ICRhcnJheWNvcnJlb1skcmFuZG9tXSl7CgkJCQkJCQkJCQkJCQkvLyBTY3JpcHQgcGFyYSByZWRpcmlnaXIgYSBsYSBwYWdpbmEgZGUgZW1wYXJlamFyIGVzZSBncnVwby4KCQkJCQkJCQkJCQkJCWVjaG8gJzxzY3JpcHQ+IAoJCQkJCQkJCQkJCQkJCXdpbmRvdy5sb2NhdGlvbi5ocmVmID0gImh0dHA6Ly8yMi4yZGF3LmVzdmlyZ3VhLmNvbS9hbWlnb2ludmlzaWJsZS9yZWdpc3RyYWRvL2dydXBvcy5waHA/aWQ9JwoJCQkJCQkJCQkJCQkJCT8+PD9waHAgZWNobyAkX0dFVFsiaWQiXSA/Pjw/cGhwIGVjaG8gJyZvcGNpb249ZW1wIjsKCQkJCQkJCQkJCQkJCTwvc2NyaXB0Pic7CgkJCQkJCQkJCQkJCX0KCQkJCQkJCQkJCQl9CgoJCQkJCQkJCQkJCWVjaG8gJzx0Ym9keT4nOwoJCQkJCQkJCQkJCWVjaG8gJzx0cj4nOwoJCQkJCQkJCQkJCSAgZWNobyAnPHRoPicuJGkuJzwvdGg+JzsKCQkJCQkJCQkJCQkgIGVjaG8gJzx0ZD4nLiR2YWxvci4nPC90ZD4nOwoJCQkJCQkJCQkJCSAgZWNobyAnPHRkID4nLiRhcnJheWNvcnJlb1skcmFuZG9tXS4nPC90ZD4nOwoJCQkJCQkJCQkJCQkvLyBHdWFyZG8gbGEgaWQgZGVsIGdydXBvIGVuIHVuYSB2YXJpYWJsZS4KCQkJCQkJCQkJCQkJJGlkZ3J1cG8gPSAkX0dFVFsiaWQiXTsKCgkJCQkJCQkJCQkJCS8vIENvbnN1bGEuIFBhcmEgc2FiZXIgc2kgdGllbmUgcmVnYWxvIGxhIHBlcnNvbmEgcXVlIHJlZ2FsYS4KCQkJCQkJCQkJCQkJJGNvbnN1bHRhID0gIgoJCQkJCQkJCQkJCQkJU0VMRUNUIHJlZ2Fsby5SdXRhLCByZWdhbG8uTm9tYnJlCgkJCQkJCQkJCQkJCQlGUk9NIHVzdWFyaW9zCgkJCQkJCQkJCQkJCQlJTk5FUiBKT0lOIHJlZ2FsbyBPTiByZWdhbG8uVXN1YXJpbyA9IHVzdWFyaW9zLklEVXN1YXJpbwoJCQkJCQkJCQkJCQkJV0hFUkUgdXN1YXJpb3MuQ29ycmVvID0gJyIuJHZhbG9yLiInIEFORCByZWdhbG8uR3J1cG8gPSAkaWRncnVwbzsKCQkJCQkJCQkJCQkJIjsKCQkJCQkJCQkJCQkJLy9lY2hvICRjb25zdWx0YTsKCQkJCQkJCQkJCQkJJG9iamV0by0+cmVhbGl6YXJDb25zdWx0YXMoJGNvbnN1bHRhKTsKCgkJCQkJCQkJCQkJCS8vIFNpIGRldnVlbHZlIGZpbGFzIHNpZ25pZmljYSBxdWUgZXNhIHBlcnNvbmEgdGllbmUgcmVnYWxvLgoJCQkJCQkJCQkJCQlpZigkb2JqZXRvLT5jb21wcm9iYXJGaWxhKCk+MCl7CgkJCQkJCQkJCQkJCQkkZmlsYSA9ICRvYmpldG8tPmV4dHJhZXJGaWxhcygpOwoJCQkJCQkJCQkJCQkJZWNobyAnPHRkPjxhIGhyZWY9Ii9hbWlnb2ludmlzaWJsZS9yZWdhbG9zLycuJF9HRVRbImlkIl0uJy8nLiR2YWxvci4nLycuJGZpbGFbIk5vbWJyZSJdLiciIHRhcmdldD0iX2JsYW5rIj5SZWdhbG88L2E+PC90ZD4nOwoJCQkJCQkJCQkJCQl9ZWxzZSAvLyBTSSBlbnRyYSBhcXVpLCBzaWduaWZpY2EgcXVlIGVzYSBwZXJzb25hIG5vIHN1YmlvIHJlZ2Fsby4KCQkJCQkJCQkJCQkJCWVjaG8gJzx0ZD5WYWNpbzwvdGQ+JzsKCQkJCQkJCQkJCQllY2hvICc8L3RyPic7CgkJCQkJCQkJCQkJLy8gR3VhcmRvIGxhcyBJRCBkZSBsb3MgZGVzdGluYXRhcmlvcyBlbiB1bmEgYXJyYXkuCgkJCQkJCQkJCQkJJGFycmF5ZGVzdGluYXRhcmlvc1tdID0gJGFycmF5Y29ycmVvWyRyYW5kb21dOwoKCQkJCQkJCQkJCQkvLyBCb3JyYSBsb3MgbnVtZXJvcyBkZWwgY29udGFkb3IsIHkgYXNpIG5vIHNlIHJlcGl0ZW4gbG9zIGNvcnJlb3MuCgkJCQkJCQkJCQkJdW5zZXQoJGFycmF5Y29udGFkb3JbJHJhbmRvbV0pOwoKCQkJCQkJCQkJCQkvLyBWYSBhdW1lbnRhbmRvIGxhICRpCgkJCQkJCQkJCQkJJGkrKzsKCQkJCQkJCQkJCX0KCQkJCQkJCQkJfQoJCQkJCQkJCQllY2hvICc8L3RhYmxlPic7CgoJCQkJCQkJCQkvLyBTZSBjcmVhIGxhcyB2YXJpYWJsZXMgcGFyYSBvYnRlbmVyIGxhcyByYWlkcyBkZSBsYXMgcGVyc29uYXMgCgkJCQkJCQkJCWVjaG8gJzxzY3JpcHQ+IAoJCQkJCQkJCQkJCQl2YXIgcmVnYWxhID0nPz48P3BocCBlY2hvIGpzb25fZW5jb2RlKCRhcnJheWNvcnJlbyk7ID8+PD9waHAgZWNobyAnOwoJCQkJCQkJCQkJCQl2YXIgZGVzdGluYXRhcmlvID0nPz48P3BocCBlY2hvIGpzb25fZW5jb2RlKCRhcnJheWRlc3RpbmF0YXJpb3MpOyA/Pjw/cGhwIGVjaG8gJzsJCgkJCQkJCQkJCQkJCXZhciBncnVwbyA9Jz8+PD9waHAgZWNobyAkX0dFVFsiaWQiXTsgPz48P3BocCBlY2hvICc7CQoJCQkJCQkJCQkJICA8L3NjcmlwdD4nOwoJCQkJCQkJCQllY2hvICc8YnV0dG9uIGlkPSJyZXBhcnRpciIgY2xhc3M9ImJ0biBidG4td2FybmluZyIgdHlwZT0iYnV0dG9uIiBkYXRhLWRpc21pc3M9Im1vZGFsIj5SZXBhcnRpcjwvYnV0dG9uPic7CgkJCQkJCQkJfQoJCQkJCQkJfQogICAgICAgICAgICAgICAgICAgICAgICA/PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVjaG8gJzxhIGhyZWY9ImdydXBvcy5waHA/aWQ9Jy4kX0dFVFsiaWQiXS4nJm9wY2lvbj1lbXAiIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiIHR5cGU9ImJ1dHRvbiI+Vm9sdmVyIGEgZW1wYXJlamFyPC9hPic7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHA6Ly8yMi4yZGF3LmVzdmlyZ3VhLmNvbS9hbWlnb2ludmlzaWJsZS9yZWdpc3RyYWRvL2dydXBvcy5waHAiIGNsYXNzPSJidG4gYnRuLXdhcm5pbmcgY2FuY2VsYXIiIHR5cGU9ImJ1dHRvbiIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+Q2FuY2VsYXI8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gUGllIC0tPgogICAgICAgIDxmb290ZXIgY2xhc3M9InAtMyBtYi0zIGNhbmNlbGFybWFyZ2luYm90dG9tIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggZmxleC13cmFwIGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGp1c3RpZnktY29udGVudC1sZy1zdGFydCI+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBMb2dvIGRlIGxhIGNvbXBhw7FpYSAtLT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvIiBjbGFzcz0iZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yIG1iLWxnLTAgdGV4dC1kYXJrIHRleHQtZGVjb3JhdGlvbi1ub25lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vZnVuZGFjaW9ubG95b2xhLmNvbS92Z3VhZGFsdXBlL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE5LzEyL2xvZ28tYm9sZXRpblcyLnBuZyIgYWx0PSJJbWFnZW4gQ29ycG9yYXRpdmEgZGVsIENvbGVnaW8iIHdpZHRoPSIxNzAiIGhlaWdodD0iODYiIHRpdGxlPSJsb2dvdGlwbyI+CiAgICAgICAgICAgICAgICAgICAgPC9hPgoKICAgICAgICAgICAgICAgICAgICA8IS0tIE1lbnUgLS0+CiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgY29sLTEyIGNvbC1sZy1hdXRvIG1lLWxnLWF1dG8gbWItMiBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIG1iLW1kLTAiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iYXZpc29zbGVnYWxlcy5waHAiIGNsYXNzPSJweC0yIj5Bdmlzb3MgTGVnYWxlczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xaWVwTFVjSlVuWTZmbThQcng2M2hEQzg5WDQ4N2lRbWpNRURTUW01ZjNQYy9lZGl0IyIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJweC0yIj5Qb2zDrXRpY2EgZGUgUHJpdmFjaWRhZDwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CgogICAgICAgICAgICAgICAgICAgIDwhLS0gU2VjY2lvbiBkZSBCb3RvbmVzIGRlIFJlZGVzIFNvbGlhbGVzIC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duIHRleHQtZW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVkZXNzb2NpYWxlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vRXNjdWVsYVZpcmdlbmRlR3VhZGFsdXBlLyIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJpbmZpbml0ZS10b3AtYmFyLXNvY2lhbC1pY29uIiB0aXRsZT0iZmFjZWJvb2siPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1mYWNlYm9vayI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9lc2N1ZWxhZXZnIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImluZmluaXRlLXRvcC1iYXItc29jaWFsLWljb24iIHRpdGxlPSJ0d2l0dGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtdHdpdHRlciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9WaXJnZW5EZUd1YWRhbHVwZVRWP25vaHRtbDU9RmFsc2UiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iaW5maW5pdGUtdG9wLWJhci1zb2NpYWwtaWNvbiIgdGl0bGU9InlvdXR1YmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS15b3V0dWJlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2Vkdmd1YWRhbHVwZS8iIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iaW5maW5pdGUtdG9wLWJhci1zb2NpYWwtaWNvbiIgdGl0bGU9Imluc3RhZ3JhbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWluc3RhZ3JhbSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Zvb3Rlcj4KICAgIDwvYm9keT4KPC9odG1sPiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";