1670694538
waR3U4bTeM%3A7996fe902b2d0d2ac60c8bed53d5db7a-806f4c0467518c92745e28b6fb74401c
s:6040:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MzY6IkFsdW1ubzogVmljdG9yIE1hbnVlbCBNYWNoYWRvIEVnaWRvLiI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czoyMjM6IkNlbnRybyBFZHVjYXRpdm86IEVzY3VlbGEgVmlyZ2VuIGRlIEd1YWRhbHVwZS4KCkNpY2xvIEZvcm1hdGl2bzogRGVzYXJyb2xsbyBkZSBBcGxpY2FjaW9uZXMgV2ViLgoKQ3Vyc286IDIwMjAtMjAyMS4KCkRlc2NyaXBjaW9uIGRlbCBmaWNoZXJvOiBFbiBlc3RlIGZpY2hlcm8gZXN0YSBkZWZpbmFkYSBsYXMgdmFyaWFibGVzIHBhcmEgYWNjZWRlciBhbCBob3N0ICYgQmFzZSBkZSBEYXRvcy4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czowOiIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjA6e319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjgwNmY0YzA0Njc1MThjOTI3NDVlMjhiNmZiNzQ0MDFjIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTQ6ImNyZWFyZ3J1cG8ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6MjU6InJlZ2lzdHJhZG8vY3JlYXJncnVwby5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjI2NjA6Ijw/cGhwCgkvKioKCSogQWx1bW5vOiBWaWN0b3IgTWFudWVsIE1hY2hhZG8gRWdpZG8uCgkqCgkqIENlbnRybyBFZHVjYXRpdm86IEVzY3VlbGEgVmlyZ2VuIGRlIEd1YWRhbHVwZS4KCSoKCSogQ2ljbG8gRm9ybWF0aXZvOiBEZXNhcnJvbGxvIGRlIEFwbGljYWNpb25lcyBXZWIuCgkqCgkqIEN1cnNvOiAyMDIwLTIwMjEuCgkqCgkqIERlc2NyaXBjaW9uIGRlbCBmaWNoZXJvOiBFbiBlc3RlIGZpY2hlcm8gZXN0YSBkZWZpbmFkYSBsYXMgdmFyaWFibGVzIHBhcmEgYWNjZWRlciBhbCBob3N0ICYgQmFzZSBkZSBEYXRvcy4KCSovCgogICAgLy8gSW5pY2lhciBzZXNpb24KICAgIHNlc3Npb25fc3RhcnQoKTsKCiAgICAvLyBDT21wcm9iYXIgcXVlIHJlY2liZSBsb3MgZGF0b3MuCiAgICBpZihpc3NldCgkX1BPU1RbIm5vbWJyZWdydXBvIl0pICYmIGlzc2V0KCRfUE9TVFsiZmVjaGFyZXBhcnRvIl0pKXsKCiAgICAgICAgLy8gRW4gY2FzbyBxdWUgdmVuZ2EgdmFjaW8gJF9QT1NUWyJub21icmVncnVwbyJdIGxlIGVzdGFibGV6Y28geW8uCgkJLy8gRW4gY2FzbyBjb250cmFyaW8gZ3VhcmRvIGVsIGRlICRfUE9TVFsibm9tYnJlZ3J1cG8iXQogICAgICAgIGlmKGVtcHR5KCRfUE9TVFsibm9tYnJlZ3J1cG8iXSkpewogICAgICAgICAgICAkbm9tYnJlZ3J1cG8gPSAiQW1pZ28gSW52aXNibGUiOwogICAgICAgIH1lbHNlCiAgICAgICAgCSRub21icmVncnVwbyA9ICRfUE9TVFsibm9tYnJlZ3J1cG8iXTsKCiAgICAgICAgLy8gR3VhcmRhciB2YXJpYWJsZXMKICAgICAgICAkZmVjaGFyZXBhcnRvID0gJF9QT1NUWyJmZWNoYXJlcGFydG8iXTsKICAgICAgICAkY29ycmVvID0gJF9TRVNTSU9OWyJ1c3VhcmlvIl07CgogICAgICAgIC8vIEZlY2hhIGRlIGhveQogICAgICAgICRmZWNoYWhveSA9IGRhdGUoJ1ktbS1kJyk7CgogICAgICAgIC8vIEltcG9ydG8gbGFzIG9wZXJhY2lvbmVzCiAgICAgICAgcmVxdWlyZSgiLi4vYXNzZXRzL29wZXJhY2lvbmVzL29wZXJhY2lvbmVzLnBocCIpOwoKICAgICAgICAvLyBDcmVhciBlbCBvYmpldG8gZGUgb3BlcmFjaW9uZXMuCiAgICAgICAgJG9iamV0bz1uZXcgT3BlcmFjaW9uZXMoKTsKCiAgICAgICAgLy8gQ29uc3VsdGEgcGFyYSB0cmFlciBsb3MgZGF0b3MgZGVsIGNvcnJlby4KICAgICAgICAkY29uc3VsdGEgPSAiU0VMRUNUICogRlJPTSB1c3VhcmlvcyBXSEVSRSBjb3JyZW89JyIuJF9TRVNTSU9OWyJjb3JyZW8iXS4iJzsiOwogICAgICAgIC8vZWNobyAnPGJyPicuJGNvbnN1bHRhLic8YnI+JzsKICAgICAgICAkb2JqZXRvLT5yZWFsaXphckNvbnN1bHRhcygkY29uc3VsdGEpOwoKICAgICAgICAvLyBDb21wcnVlYmEgcXVlIGRldm9sdmlvIGZpbGFzIC4KICAgICAgICBpZigkb2JqZXRvLT5jb21wcm9iYXJGaWxhKCk+MCl7CgogICAgICAgICAgICAvLyBFeHRyYXIgbGFzIGZpbGFzIGRlIGxhIGNvbnN1bHRhLgogICAgICAgICAgICAkZmlsYSA9ICRvYmpldG8tPmV4dHJhZXJGaWxhcygpOwoKICAgICAgICAgICAgLy8gR3VhcmRvIGVsIHRpcG8KICAgICAgICAgICAgJHVzdWFyaW8gPSAkZmlsYVsiSURVc3VhcmlvIl07CiAgICAgICAgICAgICR0aXBvID0gJGZpbGFbIlRpcG8iXTsKCiAgICAgICAgICAgIC8vIFNpIGVzICR0aXBvIHBtIGVudHJhIGVuIGVsIGlmLCBlbiBjYXNvIGNvbnRyYXJpbyBlbiBlbHNlLgogICAgICAgICAgICBpZigkdGlwbyA9PSAicCIpewogICAgICAgICAgICAgICAgLy8gQ29uc3VsdGEuIENyZWEgZWwgZ3J1cG8uCiAgICAgICAgICAgICAgICAkY29uc3VsdGEgPSAiSU5TRVJUIElOVE8gZ3J1cG9zIChOb21icmUsIEZlY2hhX0luaWNpbywgRmVjaGFfRmluLCBQcm9waWV0YXJpbykgVkFMVUVTICgnIi4kbm9tYnJlZ3J1cG8uIicsICciLiRmZWNoYWhveS4iJywgJyIuJGZlY2hhcmVwYXJ0by4iJywgJyIuJHVzdWFyaW8uIicpOyI7CiAgICAgICAgICAgICAgICAvL3ByaW50X3IoJGNvbnN1bHRhKTsKICAgICAgICAgICAgICAgICRvYmpldG8tPnJlYWxpemFyQ29uc3VsdGFzKCRjb25zdWx0YSk7CgkJCQkKCQkJCS8vIFNpIGRldnVlbHZlIGZpbGFzLCBzaWduaWZpY2EgcXVlIHNlIGluc2VydG8uCiAgICAgICAgICAgICAgICBpZigkb2JqZXRvLT5jb21wcm9iYXIoKT4wKXsKCQkJCQkvLyBPYnRpZW5lIGxhIHVsdGltYSBpZCBkZSBkZSAkY29uc3VsdGEuCgkJCQkJJGdydXBvaWQgPSAkb2JqZXRvLT51bHRpbW9pZCgpOwoJCQkJCS8vIENyZWEgbGEgY2FycGV0YSBkZWwgZ3J1cG8KCQkJCQlta2RpcignLi4vcmVnYWxvcy8nLiRncnVwb2lkLicvJywwNzc3LHRydWUpOwoKICAgICAgICAgICAgICAgICAgICBlY2hvICdTaSc7CiAgICAgICAgICAgICAgICB9ZWxzZSAvLyBFbiBjYXNvIHF1ZSBubyBoYXlhIHNpZG8gaW5zZXJ0YWRvLnsKICAgICAgICAgICAgICAgICAgICBlY2hvICdObyc7CiAgICAgICAgICAgIH1lbHNlIC8vIFNpIGVzIHRpcG8gYSB1IG90cm8KICAgICAgICAgICAgCWVjaG8gJ05vJzsKICAgICAgICB9ZWxzZSAvLyBObyBleGl0ZSBlc2UgY29ycmVvIHBvciBsbyB0YW50byBsZSByZWdyZXNhIGEgbGEgcGFnaW5hIHByaW5jaXBhbC4KICAgICAgICAJZWNobyAnTm8nOwogICAgfWVsc2UgLy8gRW4gY2FzbyBxdWUgZXN0ZW4gdmFjaWFzIGFtYmFzIHZhcmlhYmxlcy4KICAgICAgICBlY2hvICdObyc7CgoKIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";