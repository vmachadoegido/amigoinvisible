1670694538
waR3U4bTeM%3A9d40515c7059a37f30bbf40c532ee0fd-3aca2c6382addc29b92836fc3a9b5ac0
s:19572:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MzY6IkFsdW1ubzogVmljdG9yIE1hbnVlbCBNYWNoYWRvIEVnaWRvLiI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czoyMjM6IkNlbnRybyBFZHVjYXRpdm86IEVzY3VlbGEgVmlyZ2VuIGRlIEd1YWRhbHVwZS4KCkNpY2xvIEZvcm1hdGl2bzogRGVzYXJyb2xsbyBkZSBBcGxpY2FjaW9uZXMgV2ViLgoKQ3Vyc286IDIwMjAtMjAyMS4KCkRlc2NyaXBjaW9uIGRlbCBmaWNoZXJvOiBFbiBlc3RlIGZpY2hlcm8gZXN0YSBkZWZpbmFkYSBsYXMgdmFyaWFibGVzIHBhcmEgYWNjZWRlciBhbCBob3N0ICYgQmFzZSBkZSBEYXRvcy4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czowOiIiO3M6NTY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2VBbGlhc2VzIjthOjA6e319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjNhY2EyYzYzODJhZGRjMjliOTI4MzZmYzNhOWI1YWMwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6ODoidXNlci5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czoxNDoidXNlcnMvdXNlci5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjEyODI0OiI8P3BocAoJLyoqCgkqIEFsdW1ubzogVmljdG9yIE1hbnVlbCBNYWNoYWRvIEVnaWRvLgoJKgoJKiBDZW50cm8gRWR1Y2F0aXZvOiBFc2N1ZWxhIFZpcmdlbiBkZSBHdWFkYWx1cGUuCgkqCgkqIENpY2xvIEZvcm1hdGl2bzogRGVzYXJyb2xsbyBkZSBBcGxpY2FjaW9uZXMgV2ViLgoJKgoJKiBDdXJzbzogMjAyMC0yMDIxLgoJKgoJKiBEZXNjcmlwY2lvbiBkZWwgZmljaGVybzogRW4gZXN0ZSBmaWNoZXJvIGVzdGEgZGVmaW5hZGEgbGFzIHZhcmlhYmxlcyBwYXJhIGFjY2VkZXIgYWwgaG9zdCAmIEJhc2UgZGUgRGF0b3MuCgkqLwoKICAgIC8vIEluaWNpYSBzZXNpb24KICAgIHNlc3Npb25fc3RhcnQoKTsKCiAgICAvLyBUcmFlcm1lIGxvcyBkYXRvcyBkZSBjb25leGlvbi4KICAgIHJlcXVpcmUoIi4uL2Fzc2V0cy9vcGVyYWNpb25lcy9vcGVyYWNpb25lcy5waHAiKTsKCiAgICAvLyBDcmVhciBlbCBvYmpldG8gZGUgb3BlcmFjaW9uZXMuCiAgICAkb2JqZXRvID0gbmV3IE9wZXJhY2lvbmVzKCk7CgogICAgLy8gTW9zdHJhciB0b2RvcyBsb3MgZGF0b3MgcXVlIHJldmljZS4KICAgIC8vcHJpbnRfcigkX1BPU1QpOwoKICAgIC8vIEFzaWduYXIgYSBsYXMgdmFyaWFibGVzIGxvcyB2YWxvcmVzIHJlY2l2aWRvcy4KICAgICRVc2VyRW1haWwgICAgPSBpc3NldCgkX1BPU1RbIlVzZXJFbWFpbCJdKSA/ICRfUE9TVFsiVXNlckVtYWlsIl0gOiBudWxsOwogICAgJFVzZXJOYW1lICAgICA9IGlzc2V0KCRfUE9TVFsiVXNlck5hbWUiXSkgPyAgJF9QT1NUWyJVc2VyTmFtZSJdIDogbnVsbDsKICAgICRVc2VyTGFzdE5hbWUgPSBpc3NldCgkX1BPU1RbIlVzZXJMYXN0TmFtZSJdKSA/ICRfUE9TVFsiVXNlckxhc3ROYW1lIl0gOiBudWxsOwogICAgJFVzZXJBY3Rpb24gICA9IGlzc2V0KCRfUE9TVFsiVXNlckFjdGlvbiJdKSA/ICRfUE9TVFsiVXNlckFjdGlvbiJdIDogbnVsbDsKCiAgICAvLyBTaSBlbCB1c3VhcmlvIHNlIGhhIGxvZ2VhZG8uCiAgICBpZigkVXNlckFjdGlvbiA9PSAibG9naW4iKXsKICAgICAgICAvLyBCdXNjYSBlbiAkVXNlckVtYWlsIChjb3JyZW8pIGRvbmRlIGhheSB1biAnQCcsIHkgYWwgZXN0YXIgZW4gZmFsc2UgZGV2dWVsdmUgZWwgY29udGVuaWRvIGRldHJhcyBzdXlhLgogICAgICAgICRkb21pbmlvID0gc3Ryc3RyKCRVc2VyRW1haWwsICdAJywgZmFsc2UpOwoKICAgICAgICAvLyBNZW5zYWplIHBhcmEgdmVybG8gZGVzZGUgY29uc29sYSB5IGNvbXByb2JhciBlbCBkb21pbmlvLgogICAgICAgIC8vZWNobyAnPGJyPj4gRWwgZG9taW5pbyBlczogJy4kZG9taW5pby4nPGJyPic7CgoKICAgICAgICAvLyBDb21wcm9iYXIgZWwgZG9taW5pbwogICAgICAgIHN3aXRjaCAoJGRvbWluaW8pewogICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICAgLy8gRG9taW5pbyBkZWwgQWx1bW5vICdAYWx1bW5hZG8uZnVuZGFjaW9ubG95b2xhLm5ldCcKICAgICAgICAgICAgY2FzZSAnQGFsdW1uYWRvLmZ1bmRhY2lvbmxveW9sYS5uZXQnOgogICAgICAgICAgICAgICAgLy8gQ29tcHJvYmFyIHF1ZSBlbnRyYSBhcXVpLgogICAgICAgICAgICAgICAgLy9lY2hvICc+IFR1IGRvbWluaW8gZXMgZGUgQWx1bW5vJzsKCiAgICAgICAgICAgICAgICAvLyBDb21wcm9iYXIgcXVlIGV4aXN0ZSBlbiBsYSBCRCBlc2UgY29ycmVvLgogICAgICAgICAgICAgICAgJGNvbnN1bHRhID0gIlNFTEVDVCAqIEZST00gdXN1YXJpb3MgV0hFUkUgQ29ycmVvPSckVXNlckVtYWlsJyI7CiAgICAgICAgICAgICAgICAvL2VjaG8gJzxicj5MYSBjb25zdWx0YSAnLiRjb25zdWx0YS4nPGJyPic7CgogICAgICAgICAgICAgICAgJG9iamV0by0+cmVhbGl6YXJDb25zdWx0YXMoJGNvbnN1bHRhKTsKCgogICAgICAgICAgICAgICAgLy8gU2kgZGV2dWVsdmUgZmlsYSwgc2lnbmlmaWNhIHF1ZSBleGlzdGUgZXNlIGFsdW1ubyBlbiBsYSBCRCwgcG9yIGxvIHRhbnRvIHlhIGVzdGEgcmVnaXN0cmFkby4KICAgICAgICAgICAgICAgIGlmICgkb2JqZXRvLT5jb21wcm9iYXJGaWxhKCk+MCl7CiAgICAgICAgICAgICAgICAgICAgLy8gTWVuc2FqZSBxdWUgaW5kaWNhIHF1ZSBlc2EgY3VlbnRhIGVzdGEgY3JlYWRhIGVuIGxhIEJELgogICAgICAgICAgICAgICAgICAgIC8vZWNobyAnPGJyPj4gRWwgQWx1bW5vIGVzdGEgZ3VhcmRhZG8uPGJyPic7CgogICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhaWdvIGxvcyBkYXRvcyBzYWNhZG8gZGUgbGEgY29uc3VsdGEgKGxpbmVhIDQwKSB5IGxvIGd1YXJkbyBlbiB1bmEgdmFyaWFibGUuCiAgICAgICAgICAgICAgICAgICAgJGZpbGEgPSAkb2JqZXRvLT5leHRyYWVyRmlsYXMoKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlbyB1bmEgcmFpZCwgZG9uZGUgZ3VhcmRhcmUgcXVlIGVzdGEgbG9nZWFkbyB5IGxvcyBkYXRvcyBkZSBsYSBCRC4KICAgICAgICAgICAgICAgICAgICAkcmVzcHVlc3RhWyJsb2dnZWQiXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgJHJlc3B1ZXN0YVsiaW5mbyJdICAgPSAkZmlsYTsKCiAgICAgICAgICAgICAgICAgICAgLy8gSW1wcmltZSBsb3MgZGF0b3MgZGUgbGEgQkQuIHNpZ25pbi5qcyBsbyBsZWUuCiAgICAgICAgICAgICAgICAgICAgcHJpbnRfcigkcmVzcHVlc3RhKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gU2UgZ3VhcmRhIGVsIGNvcnJlbyB5IGVsIHJvbCBkZWwgdXN1YXJpby4KICAgICAgICAgICAgICAgICAgICAkX1NFU1NJT05bImNvcnJlbyJdID0gJGZpbGFbIkNvcnJlbyJdOwogICAgICAgICAgICAgICAgICAgICRfU0VTU0lPTlsicm9sIl0gPSAkZmlsYVsiVGlwbyJdOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgLy8gTWVuc2FqZSBxdWUgZWwgQWx1bW5vLCBubyBlc3RhIHJlZ2lzdHJhZG8uCiAgICAgICAgICAgICAgICAgICAgLy9lY2hvICc8YnI+PiBFbCBBbHVtbm8gPGI+Tk88L2I+IGVzdGEgZ3VhcmRhZG8uJzsKICAgICAgICAgICAgICAgICAgICAkY29uc3VsdGEgPSAiSU5TRVJUIElOVE8gdXN1YXJpb3MgKFVzZXJOYW1lLCBVc2VyTGFzdE5hbWUsIENvcnJlbywgVGlwbykgVkFMVUVTICgnJFVzZXJOYW1lJywgJyRVc2VyTGFzdE5hbWUnLCAnJFVzZXJFbWFpbCcsICdhJykiOwogICAgICAgICAgICAgICAgICAgIC8vZWNobyAkY29uc3VsdGE7CiAgICAgICAgICAgICAgICAgICAgJG9iamV0by0+cmVhbGl6YXJDb25zdWx0YXMoJGNvbnN1bHRhKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gU2kgZGV2dWVsdmUgZmlsYXMsIHNpZ25pZmljYSBxdWUgc2UgaW5zZXJ0byBlbiBsYSB0YWJsYSBjb3JyZWN0YW1lbnRlLgogICAgICAgICAgICAgICAgICAgIGlmICgkb2JqZXRvLT5jb21wcm9iYXIoKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJvYmFyIHF1ZSBleGlzdGUgZW4gbGEgQkQgZXNlIGNvcnJlby4KICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnN1bHRhID0gIlNFTEVDVCAqIEZST00gdXN1YXJpb3MgV0hFUkUgQ29ycmVvPSckVXNlckVtYWlsJyI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vZWNobyAnPGJyPkxhIGNvbnN1bHRhICcuJGNvbnN1bHRhLic8YnI+JzsKICAgICAgICAgICAgICAgICAgICAgICAgLy9wcmludF9yKCRjb25zdWx0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICRvYmpldG8tPnJlYWxpemFyQ29uc3VsdGFzKCRjb25zdWx0YSk7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgcXVlIGVzZSBjb3JyZW8gZXhpc3RlIGVuIGxhIHRhYmxhIHVzdWFyaW9zLgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJG9iamV0by0+Y29tcHJvYmFyRmlsYSgpPjApewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1lbnNhamUgcXVlIGluZGljYSBxdWUgZXNhIGN1ZW50YSBlc3RhIGNyZWFkYSBlbiBsYSBCRC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZWNobyAnPGJyPj4gRWwgQWx1bW5vIHNlIGd1YXJkYWRvLjxicj4nOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhaWdvIGxvcyBkYXRvcyBzYWNhZG8gZGUgbGEgY29uc3VsdGEgKGxpbmVhIDQwKSB5IGxvIGd1YXJkbyBlbiB1bmEgdmFyaWFibGUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmlsYSA9ICRvYmpldG8tPmV4dHJhZXJGaWxhcygpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZW8gdW5hIHJhaWQsIGRvbmRlIGd1YXJkYXJlIHF1ZSBlc3RhIGxvZ2VhZG8geSBsb3MgZGF0b3MgZGUgbGEgQkQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzcHVlc3RhWyJsb2dnZWQiXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzcHVlc3RhWyJpbmZvIl0gICA9ICRmaWxhOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEltcHJpbWUgbG9zIGRhdG9zIGRlIGxhIEJELiBzaWduaW4uanMgbG8gbGVlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnRfcigkcmVzcHVlc3RhKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZSBndWFyZGEgZWwgY29ycmVvIHkgZWwgcm9sIGRlbCB1c3VhcmlvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWyJjb3JyZW8iXSA9ICRmaWxhWyJDb3JyZW8iXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfU0VTU0lPTlsicm9sIl0gPSAkZmlsYVsiVGlwbyJdOwoKICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZW5zYWplIHF1ZSBvY3VycmlvIHVuIHByb2JsZW1hCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2VjaG8gJzxicj4+IEVsIEFsdW1ubyBubyBlc3RhIGd1YXJkYWRvLjxicj4nOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgICAgICAvLyBEb21pbmlvIGRlbCBQcm9mZXNvciAnQGZ1bmRhY2lvbmxveW9sYS5lcycKICAgICAgICAgICAgY2FzZSAnQGZ1bmRhY2lvbmxveW9sYS5lcyc6CiAgICAgICAgICAgICAgICAvLyBDb21wcm9iYXIgcXVlIGVudHJhIGFxdWkuCiAgICAgICAgICAgICAgICAvL2VjaG8gJz4gVHUgZG9taW5pbyBlcyBkZSBQcm9mZXNvcic7CgogICAgICAgICAgICAgICAgLy8gQ29tcHJvYmFyIHF1ZSBleGlzdGUgZW4gbGEgQkQgZXNlIGNvcnJlby4KICAgICAgICAgICAgICAgICRjb25zdWx0YSA9ICJTRUxFQ1QgKiBGUk9NIHVzdWFyaW9zIFdIRVJFIENvcnJlbz0nJFVzZXJFbWFpbCciOwogICAgICAgICAgICAgICAgLy9lY2hvICc8YnI+TGEgY29uc3VsdGEgJy4kY29uc3VsdGEuJzxicj4nOwogICAgICAgICAgICAgICAgLy9wcmludF9yKCRjb25zdWx0YSk7CiAgICAgICAgICAgICAgICAkb2JqZXRvLT5yZWFsaXphckNvbnN1bHRhcygkY29uc3VsdGEpOwoKCiAgICAgICAgICAgICAgICAvLyBTaSBkZXZ1ZWx2ZSBmaWxhLCBzaWduaWZpY2EgcXVlIGV4aXN0ZSBlc2UgYWx1bW5vIGVuIGxhIEJELCBwb3IgbG8gdGFudG8geWEgZXN0YSByZWdpc3RyYWRvLgogICAgICAgICAgICAgICAgaWYgKCRvYmpldG8tPmNvbXByb2JhckZpbGEoKT4wKXsKICAgICAgICAgICAgICAgICAgICAvLyBNZW5zYWplIHF1ZSBpbmRpY2EgcXVlIGVzYSBjdWVudGEgZXN0YSBjcmVhZGEgZW4gbGEgQkQuCiAgICAgICAgICAgICAgICAgICAgLy9lY2hvICc8YnI+PiBFbCBBbHVtbm8gbm8gZXN0YSBndWFyZGFkby48YnI+JzsKCiAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFpZ28gbG9zIGRhdG9zIHNhY2FkbyBkZSBsYSBjb25zdWx0YSAobGluZWEgNDApIHkgbG8gZ3VhcmRvIGVuIHVuYSB2YXJpYWJsZS4KICAgICAgICAgICAgICAgICAgICAkZmlsYSA9ICRvYmpldG8tPmV4dHJhZXJGaWxhcygpOwoKICAgICAgICAgICAgICAgICAgICAvLyBDcmVvIHVuYSByYWlkLCBkb25kZSBndWFyZGFyZSBxdWUgZXN0YSBsb2dlYWRvIHkgbG9zIGRhdG9zIGRlIGxhIEJELgogICAgICAgICAgICAgICAgICAgICRyZXNwdWVzdGFbImxvZ2dlZCJdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAkcmVzcHVlc3RhWyJpbmZvIl0gICA9ICRmaWxhOwoKICAgICAgICAgICAgICAgICAgICAvLyBJbXByaW1lIGxvcyBkYXRvcyBkZSBsYSBCRC4gc2lnbmluLmpzIGxvIGxlZS4KICAgICAgICAgICAgICAgICAgICBwcmludF9yKCRyZXNwdWVzdGEpOwoKICAgICAgICAgICAgICAgICAgICAvLyBTZSBndWFyZGEgZWwgY29ycmVvIHkgZWwgcm9sIGRlbCB1c3VhcmlvLgogICAgICAgICAgICAgICAgICAgICRfU0VTU0lPTlsiY29ycmVvIl0gPSAkZmlsYVsiQ29ycmVvIl07CiAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWyJyb2wiXSA9ICRmaWxhWyJUaXBvIl07CgogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgLy8gTWVuc2FqZSBxdWUgZWwgQWx1bW5vLCBubyBlc3RhIHJlZ2lzdHJhZG8uCiAgICAgICAgICAgICAgICAgICAgLy9lY2hvICc8YnI+PiBFbCBBbHVtbm8gPGI+Tk88L2I+IGVzdGEgZ3VhcmRhZG8uJzsKICAgICAgICAgICAgICAgICAgICAkY29uc3VsdGEgPSAiSU5TRVJUIElOVE8gdXN1YXJpb3MgKFVzZXJOYW1lLCBVc2VyTGFzdE5hbWUsIENvcnJlbywgVGlwbykgVkFMVUVTICgnJFVzZXJOYW1lJywgJyRVc2VyTGFzdE5hbWUnLCAnJFVzZXJFbWFpbCcsICdwJykiOwogICAgICAgICAgICAgICAgICAgIC8vZWNobyAkY29uc3VsdGE7CiAgICAgICAgICAgICAgICAgICAgJG9iamV0by0+cmVhbGl6YXJDb25zdWx0YXMoJGNvbnN1bHRhKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gU2kgZGV2dWVsdmUgZmlsYXMsIHNpZ25pZmljYSBxdWUgc2UgaW5zZXJ0byBlbiBsYSB0YWJsYSBjb3JyZWN0YW1lbnRlLgogICAgICAgICAgICAgICAgICAgIGlmICgkb2JqZXRvLT5jb21wcm9iYXIoKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJvYmFyIHF1ZSBleGlzdGUgZW4gbGEgQkQgZXNlIGNvcnJlby4KICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnN1bHRhID0gIlNFTEVDVCAqIEZST00gdXN1YXJpb3MgV0hFUkUgQ29ycmVvPSckVXNlckVtYWlsJyI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vZWNobyAnPGJyPkxhIGNvbnN1bHRhICcuJGNvbnN1bHRhLic8YnI+JzsKICAgICAgICAgICAgICAgICAgICAgICAgLy9wcmludF9yKCRjb25zdWx0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICRvYmpldG8tPnJlYWxpemFyQ29uc3VsdGFzKCRjb25zdWx0YSk7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wcnVlYmEgcXVlIGVzZSBjb3JyZW8gZXhpc3RlIGVuIGxhIHRhYmxhIHVzdWFyaW9zLgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJG9iamV0by0+Y29tcHJvYmFyRmlsYSgpPjApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVuc2FqZSBxdWUgaW5kaWNhIHF1ZSBlc2EgY3VlbnRhIGVzdGEgY3JlYWRhIGVuIGxhIEJELgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lY2hvICc8YnI+PiBFbCBBbHVtbm8gc2UgZ3VhcmRhZG8uPGJyPic7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFpZ28gbG9zIGRhdG9zIHNhY2FkbyBkZSBsYSBjb25zdWx0YSAobGluZWEgNDApIHkgbG8gZ3VhcmRvIGVuIHVuYSB2YXJpYWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmaWxhID0gJG9iamV0by0+ZXh0cmFlckZpbGFzKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlbyB1bmEgcmFpZCwgZG9uZGUgZ3VhcmRhcmUgcXVlIGVzdGEgbG9nZWFkbyB5IGxvcyBkYXRvcyBkZSBsYSBCRC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXNwdWVzdGFbImxvZ2dlZCJdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXNwdWVzdGFbImluZm8iXSAgID0gJGZpbGE7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW1wcmltZSBsb3MgZGF0b3MgZGUgbGEgQkQuIHNpZ25pbi5qcyBsbyBsZWUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludF9yKCRyZXNwdWVzdGEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlIGd1YXJkYSBlbCBjb3JyZW8geSBlbCByb2wgZGVsIHVzdWFyaW8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX1NFU1NJT05bImNvcnJlbyJdID0gJGZpbGFbIkNvcnJlbyJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWyJyb2wiXSA9ICRmaWxhWyJUaXBvIl07CgogICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1lbnNhamUgcXVlIG9jdXJyaW8gdW4gcHJvYmxlbWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZWNobyAnPGJyPj4gRWwgQWx1bW5vIG5vIGVzdGEgZ3VhcmRhZG8uPGJyPic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBicmVhazsKCQkJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgICAgIC8vIERvbWluaW8gZGVsIEFsdW1ubyAnQGNvcnJlby5ldmcuZXMnCiAgICAgICAgICAgIGNhc2UgJ0Bjb3JyZW8uZXZnLmVzJzoKICAgICAgICAgICAgICAgIC8vIENvbXByb2JhciBxdWUgZW50cmEgYXF1aS4KICAgICAgICAgICAgICAgIC8vZWNobyAnPiBUdSBkb21pbmlvIGVzIGRlIEFsdW1ubyc7CgogICAgICAgICAgICAgICAgLy8gQ29tcHJvYmFyIHF1ZSBleGlzdGUgZW4gbGEgQkQgZXNlIGNvcnJlby4KICAgICAgICAgICAgICAgICRjb25zdWx0YSA9ICJTRUxFQ1QgKiBGUk9NIHVzdWFyaW9zIFdIRVJFIENvcnJlbz0nJFVzZXJFbWFpbCciOwogICAgICAgICAgICAgICAgLy9lY2hvICc8YnI+TGEgY29uc3VsdGEgJy4kY29uc3VsdGEuJzxicj4nOwoKICAgICAgICAgICAgICAgICRvYmpldG8tPnJlYWxpemFyQ29uc3VsdGFzKCRjb25zdWx0YSk7CgoKICAgICAgICAgICAgICAgIC8vIFNpIGRldnVlbHZlIGZpbGEsIHNpZ25pZmljYSBxdWUgZXhpc3RlIGVzZSBhbHVtbm8gZW4gbGEgQkQsIHBvciBsbyB0YW50byB5YSBlc3RhIHJlZ2lzdHJhZG8uCiAgICAgICAgICAgICAgICBpZiAoJG9iamV0by0+Y29tcHJvYmFyRmlsYSgpPjApewogICAgICAgICAgICAgICAgICAgIC8vIE1lbnNhamUgcXVlIGluZGljYSBxdWUgZXNhIGN1ZW50YSBlc3RhIGNyZWFkYSBlbiBsYSBCRC4KICAgICAgICAgICAgICAgICAgICAvL2VjaG8gJzxicj4+IEVsIEFsdW1ubyBlc3RhIGd1YXJkYWRvLjxicj4nOwoKICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWlnbyBsb3MgZGF0b3Mgc2FjYWRvIGRlIGxhIGNvbnN1bHRhIChsaW5lYSA0MCkgeSBsbyBndWFyZG8gZW4gdW5hIHZhcmlhYmxlLgogICAgICAgICAgICAgICAgICAgICRmaWxhID0gJG9iamV0by0+ZXh0cmFlckZpbGFzKCk7CgogICAgICAgICAgICAgICAgICAgIC8vIENyZW8gdW5hIHJhaWQsIGRvbmRlIGd1YXJkYXJlIHF1ZSBlc3RhIGxvZ2VhZG8geSBsb3MgZGF0b3MgZGUgbGEgQkQuCiAgICAgICAgICAgICAgICAgICAgJHJlc3B1ZXN0YVsibG9nZ2VkIl0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICRyZXNwdWVzdGFbImluZm8iXSAgID0gJGZpbGE7CgogICAgICAgICAgICAgICAgICAgIC8vIEltcHJpbWUgbG9zIGRhdG9zIGRlIGxhIEJELiBzaWduaW4uanMgbG8gbGVlLgogICAgICAgICAgICAgICAgICAgIHByaW50X3IoJHJlc3B1ZXN0YSk7CgogICAgICAgICAgICAgICAgICAgIC8vIFNlIGd1YXJkYSBlbCBjb3JyZW8geSBlbCByb2wgZGVsIHVzdWFyaW8uCiAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWyJjb3JyZW8iXSA9ICRmaWxhWyJDb3JyZW8iXTsKICAgICAgICAgICAgICAgICAgICAkX1NFU1NJT05bInJvbCJdID0gJGZpbGFbIlRpcG8iXTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIC8vIE1lbnNhamUgcXVlIGVsIEFsdW1ubywgbm8gZXN0YSByZWdpc3RyYWRvLgogICAgICAgICAgICAgICAgICAgIC8vZWNobyAnPGJyPj4gRWwgQWx1bW5vIDxiPk5PPC9iPiBlc3RhIGd1YXJkYWRvLic7CiAgICAgICAgICAgICAgICAgICAgJGNvbnN1bHRhID0gIklOU0VSVCBJTlRPIHVzdWFyaW9zIChVc2VyTmFtZSwgVXNlckxhc3ROYW1lLCBDb3JyZW8sIFRpcG8pIFZBTFVFUyAoJyRVc2VyTmFtZScsICckVXNlckxhc3ROYW1lJywgJyRVc2VyRW1haWwnLCAnYScpIjsKICAgICAgICAgICAgICAgICAgICAvL2VjaG8gJGNvbnN1bHRhOwogICAgICAgICAgICAgICAgICAgICRvYmpldG8tPnJlYWxpemFyQ29uc3VsdGFzKCRjb25zdWx0YSk7CgogICAgICAgICAgICAgICAgICAgIC8vIFNpIGRldnVlbHZlIGZpbGFzLCBzaWduaWZpY2EgcXVlIHNlIGluc2VydG8gZW4gbGEgdGFibGEgY29ycmVjdGFtZW50ZS4KICAgICAgICAgICAgICAgICAgICBpZiAoJG9iamV0by0+Y29tcHJvYmFyKCk+MCl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbXByb2JhciBxdWUgZXhpc3RlIGVuIGxhIEJEIGVzZSBjb3JyZW8uCiAgICAgICAgICAgICAgICAgICAgICAgICRjb25zdWx0YSA9ICJTRUxFQ1QgKiBGUk9NIHVzdWFyaW9zIFdIRVJFIENvcnJlbz0nJFVzZXJFbWFpbCciOwogICAgICAgICAgICAgICAgICAgICAgICAvL2VjaG8gJzxicj5MYSBjb25zdWx0YSAnLiRjb25zdWx0YS4nPGJyPic7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJpbnRfcigkY29uc3VsdGEpOwogICAgICAgICAgICAgICAgICAgICAgICAkb2JqZXRvLT5yZWFsaXphckNvbnN1bHRhcygkY29uc3VsdGEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHJ1ZWJhIHF1ZSBlc2UgY29ycmVvIGV4aXN0ZSBlbiBsYSB0YWJsYSB1c3Vhcmlvcy4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRvYmpldG8tPmNvbXByb2JhckZpbGEoKT4wKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZW5zYWplIHF1ZSBpbmRpY2EgcXVlIGVzYSBjdWVudGEgZXN0YSBjcmVhZGEgZW4gbGEgQkQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2VjaG8gJzxicj4+IEVsIEFsdW1ubyBzZSBndWFyZGFkby48YnI+JzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWlnbyBsb3MgZGF0b3Mgc2FjYWRvIGRlIGxhIGNvbnN1bHRhIChsaW5lYSA0MCkgeSBsbyBndWFyZG8gZW4gdW5hIHZhcmlhYmxlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZpbGEgPSAkb2JqZXRvLT5leHRyYWVyRmlsYXMoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVvIHVuYSByYWlkLCBkb25kZSBndWFyZGFyZSBxdWUgZXN0YSBsb2dlYWRvIHkgbG9zIGRhdG9zIGRlIGxhIEJELgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlc3B1ZXN0YVsibG9nZ2VkIl0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlc3B1ZXN0YVsiaW5mbyJdICAgPSAkZmlsYTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbXByaW1lIGxvcyBkYXRvcyBkZSBsYSBCRC4gc2lnbmluLmpzIGxvIGxlZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50X3IoJHJlc3B1ZXN0YSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2UgZ3VhcmRhIGVsIGNvcnJlbyB5IGVsIHJvbCBkZWwgdXN1YXJpby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfU0VTU0lPTlsiY29ycmVvIl0gPSAkZmlsYVsiQ29ycmVvIl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX1NFU1NJT05bInJvbCJdID0gJGZpbGFbIlRpcG8iXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVuc2FqZSBxdWUgb2N1cnJpbyB1biBwcm9ibGVtYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lY2hvICc8YnI+PiBFbCBBbHVtbm8gbm8gZXN0YSBndWFyZGFkby48YnI+JzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICAgLy8gRWwgZG9taW5pbyBubyBlcyB2YWxpZG8uCiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAvL2VjaG8gJz4gRXN0ZSBkb21pbmlvIG5vIHRpZW5lIGFjY2Vzby4nOwogICAgICAgICAgICAgICAgJHJlc3B1ZXN0YVsibG9nZ2VkIl0gPSAwOwogICAgICAgICAgICAgICAgcHJpbnRfcigkcmVzcHVlc3RhKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgIH0KCj8+CiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";